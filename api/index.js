Index.PACKAGES = {"monix" : [], "monix.bio" : [{"name" : "monix.bio.BiCallback", "shortDescription" : "Callback type which supports two channels of errors.", "object" : "monix\/bio\/BiCallback$.html", "members_class" : [{"label" : "tryApply", "tail" : "(result: Try[A])(ev: <:<[Throwable, E]): Boolean", "member" : "monix.bio.BiCallback.tryApply", "link" : "monix\/bio\/BiCallback.html#tryApply(result:scala.util.Try[A])(implicitev:Throwable<:<E):Boolean", "kind" : "def"}, {"label" : "apply", "tail" : "(result: Try[A])(ev: <:<[Throwable, E]): Unit", "member" : "monix.bio.BiCallback.apply", "link" : "monix\/bio\/BiCallback.html#apply(result:scala.util.Try[A])(implicitev:Throwable<:<E):Unit", "kind" : "def"}, {"label" : "tryApply", "tail" : "(result: Either[Cause[E], A]): Boolean", "member" : "monix.bio.BiCallback.tryApply", "link" : "monix\/bio\/BiCallback.html#tryApply(result:Either[monix.bio.Cause[E],A]):Boolean", "kind" : "def"}, {"label" : "tryOnTermination", "tail" : "(e: Throwable): Boolean", "member" : "monix.bio.BiCallback.tryOnTermination", "link" : "monix\/bio\/BiCallback.html#tryOnTermination(e:Throwable):Boolean", "kind" : "def"}, {"label" : "tryOnError", "tail" : "(e: E): Boolean", "member" : "monix.bio.BiCallback.tryOnError", "link" : "monix\/bio\/BiCallback.html#tryOnError(e:E):Boolean", "kind" : "def"}, {"label" : "tryOnSuccess", "tail" : "(value: A): Boolean", "member" : "monix.bio.BiCallback.tryOnSuccess", "link" : "monix\/bio\/BiCallback.html#tryOnSuccess(value:A):Boolean", "kind" : "def"}, {"label" : "contramap", "tail" : "(f: (B) => A): BiCallback[E, B]", "member" : "monix.bio.BiCallback.contramap", "link" : "monix\/bio\/BiCallback.html#contramap[B](f:B=>A):monix.bio.BiCallback[E,B]", "kind" : "def"}, {"label" : "apply", "tail" : "(result: Try[Either[E, A]]): Unit", "member" : "monix.bio.BiCallback.apply", "link" : "monix\/bio\/BiCallback.html#apply(result:scala.util.Try[Either[E,A]]):Unit", "kind" : "def"}, {"label" : "apply", "tail" : "(result: Either[Cause[E], A]): Unit", "member" : "monix.bio.BiCallback.apply", "link" : "monix\/bio\/BiCallback.html#apply(result:Either[monix.bio.Cause[E],A]):Unit", "kind" : "def"}, {"member" : "monix.bio.BiCallback#<init>", "error" : "unsupported entity"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Function1.toString", "link" : "monix\/bio\/BiCallback.html#toString():String", "kind" : "def"}, {"label" : "andThen", "tail" : "(g: (Unit) => A): (Either[Cause[E], A]) => A", "member" : "scala.Function1.andThen", "link" : "monix\/bio\/BiCallback.html#andThen[A](g:R=>A):T1=>A", "kind" : "def"}, {"label" : "compose", "tail" : "(g: (A) => Either[Cause[E], A]): (A) => Unit", "member" : "scala.Function1.compose", "link" : "monix\/bio\/BiCallback.html#compose[A](g:A=>T1):A=>R", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/BiCallback.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/BiCallback.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/BiCallback.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/BiCallback.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/BiCallback.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/BiCallback.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/BiCallback.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/BiCallback.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/BiCallback.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/BiCallback.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/BiCallback.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/BiCallback.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/BiCallback.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/BiCallback.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/BiCallback.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/BiCallback.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/BiCallback.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/BiCallback.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "onTermination", "tail" : "(e: Throwable): Unit", "member" : "monix.bio.BiCallback.onTermination", "link" : "monix\/bio\/BiCallback.html#onTermination(e:Throwable):Unit", "kind" : "abstract def"}, {"label" : "onError", "tail" : "(e: E): Unit", "member" : "monix.bio.BiCallback.onError", "link" : "monix\/bio\/BiCallback.html#onError(e:E):Unit", "kind" : "abstract def"}, {"label" : "onSuccess", "tail" : "(value: A): Unit", "member" : "monix.bio.BiCallback.onSuccess", "link" : "monix\/bio\/BiCallback.html#onSuccess(value:A):Unit", "kind" : "abstract def"}], "members_object" : [{"label" : "Builders", "tail" : "", "member" : "monix.bio.BiCallback.Builders", "link" : "monix\/bio\/BiCallback$.html#Builders[E]extendsAnyVal", "kind" : "final class"}, {"label" : "fromAttempt", "tail" : "(cb: (Either[Cause[E], A]) => Unit): BiCallback[E, A]", "member" : "monix.bio.BiCallback.fromAttempt", "link" : "monix\/bio\/BiCallback$.html#fromAttempt[E,A](cb:Either[monix.bio.Cause[E],A]=>Unit):monix.bio.BiCallback[E,A]", "kind" : "def"}, {"label" : "trampolined", "tail" : "(cb: BiCallback[E, A])(ec: ExecutionContext): BiCallback[E, A]", "member" : "monix.bio.BiCallback.trampolined", "link" : "monix\/bio\/BiCallback$.html#trampolined[E,A](cb:monix.bio.BiCallback[E,A])(implicitec:scala.concurrent.ExecutionContext):monix.bio.BiCallback[E,A]", "kind" : "def"}, {"label" : "forked", "tail" : "(cb: BiCallback[E, A])(ec: ExecutionContext): BiCallback[E, A]", "member" : "monix.bio.BiCallback.forked", "link" : "monix\/bio\/BiCallback$.html#forked[E,A](cb:monix.bio.BiCallback[E,A])(implicitec:scala.concurrent.ExecutionContext):monix.bio.BiCallback[E,A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(cb: (Try[A]) => Unit): BiCallback[Throwable, A]", "member" : "monix.bio.BiCallback.fromTry", "link" : "monix\/bio\/BiCallback$.html#fromTry[A](cb:scala.util.Try[A]=>Unit):monix.bio.BiCallback[Throwable,A]", "kind" : "def"}, {"label" : "fromPromise", "tail" : "(p: Promise[Either[E, A]]): BiCallback[E, A]", "member" : "monix.bio.BiCallback.fromPromise", "link" : "monix\/bio\/BiCallback$.html#fromPromise[E,A](p:scala.concurrent.Promise[Either[E,A]]):monix.bio.BiCallback[E,A]", "kind" : "def"}, {"label" : "empty", "tail" : "(r: UncaughtExceptionReporter): BiCallback[E, A]", "member" : "monix.bio.BiCallback.empty", "link" : "monix\/bio\/BiCallback$.html#empty[E,A](implicitr:monix.execution.UncaughtExceptionReporter):monix.bio.BiCallback[E,A]", "kind" : "def"}, {"label" : "safe", "tail" : "(cb: BiCallback[E, A])(r: UncaughtExceptionReporter): BiCallback[E, A]", "member" : "monix.bio.BiCallback.safe", "link" : "monix\/bio\/BiCallback$.html#safe[E,A](cb:monix.bio.BiCallback[E,A])(implicitr:monix.execution.UncaughtExceptionReporter):monix.bio.BiCallback[E,A]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Builders[E]", "member" : "monix.bio.BiCallback.apply", "link" : "monix\/bio\/BiCallback$.html#apply[E]:monix.bio.BiCallback.Builders[E]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/BiCallback$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/BiCallback$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/BiCallback$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/BiCallback$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/BiCallback$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/BiCallback$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/BiCallback$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/BiCallback$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/BiCallback$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/BiCallback$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/BiCallback$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/BiCallback$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/BiCallback$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/BiCallback$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/BiCallback$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/BiCallback$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/BiCallback$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/BiCallback$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/BiCallback$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/BiCallback.html", "kind" : "class"}, {"name" : "monix.bio.Cause", "shortDescription" : "Represent a complete cause of the failed Taskexposing both typed and untyped error channel.", "object" : "monix\/bio\/Cause$.html", "members_class" : [{"label" : "toThrowable", "tail" : "(E: <:<[E, Throwable]): Throwable", "member" : "monix.bio.Cause.toThrowable", "link" : "monix\/bio\/Cause.html#toThrowable(implicitE:E<:<Throwable):Throwable", "kind" : "def"}, {"label" : "fold", "tail" : "(fa: (Throwable) => B, fb: (E) => B): B", "member" : "monix.bio.Cause.fold", "link" : "monix\/bio\/Cause.html#fold[B](fa:Throwable=>B,fb:E=>B):B", "kind" : "def"}, {"label" : "productElementNames", "tail" : "(): Iterator[String]", "member" : "scala.Product.productElementNames", "link" : "monix\/bio\/Cause.html#productElementNames:Iterator[String]", "kind" : "def"}, {"label" : "productElementName", "tail" : "(n: Int): String", "member" : "scala.Product.productElementName", "link" : "monix\/bio\/Cause.html#productElementName(n:Int):String", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "monix\/bio\/Cause.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "monix\/bio\/Cause.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/Cause.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/Cause.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/Cause.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/Cause.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/Cause.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/Cause.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/Cause.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Cause.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Cause.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Cause.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/Cause.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/Cause.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/Cause.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/Cause.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/Cause.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/Cause.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/Cause.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/Cause.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/Cause.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "monix\/bio\/Cause.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "monix\/bio\/Cause.html#productArity:Int", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "monix\/bio\/Cause.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Termination", "tail" : "", "member" : "monix.bio.Cause.Termination", "link" : "monix\/bio\/Cause$.html#TerminationextendsCause[Nothing]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Error", "tail" : "", "member" : "monix.bio.Cause.Error", "link" : "monix\/bio\/Cause$.html#Error[+E]extendsCause[E]withProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/Cause$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/Cause$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/Cause$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/Cause$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/Cause$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/Cause$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/Cause$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Cause$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Cause$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Cause$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/Cause$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/Cause$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/Cause$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/Cause$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/Cause$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/Cause$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/Cause$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/Cause$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/Cause$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/Cause.html", "kind" : "class"}, {"name" : "monix.bio.Fiber", "object" : "monix\/bio\/Fiber$.html", "members_object" : [{"label" : "apply", "tail" : "(task: Task[E, A], cancel: CancelToken[UIO]): Fiber[E, A]", "member" : "monix.bio.Fiber.apply", "link" : "monix\/bio\/Fiber$.html#apply[E,A](task:monix.bio.Task[E,A],cancel:cats.effect.CancelToken[monix.bio.UIO]):monix.bio.Fiber[E,A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/Fiber$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/Fiber$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/Fiber$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/Fiber$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/Fiber$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/Fiber$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/Fiber$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Fiber$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Fiber$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Fiber$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/Fiber$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/Fiber$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/Fiber$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/Fiber$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/Fiber$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/Fiber$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/Fiber$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/Fiber$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/Fiber$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/bio\/Fiber.html", "kind" : "trait", "members_trait" : [{"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/Fiber.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/Fiber.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/Fiber.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/Fiber.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/Fiber.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/Fiber.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/Fiber.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Fiber.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Fiber.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Fiber.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/Fiber.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/Fiber.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/Fiber.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/Fiber.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/Fiber.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/Fiber.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/Fiber.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/Fiber.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/Fiber.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "join", "tail" : "(): Task[E, A]", "member" : "monix.bio.Fiber.join", "link" : "monix\/bio\/Fiber.html#join:monix.bio.Task[E,A]", "kind" : "abstract def"}, {"label" : "cancel", "tail" : "(): CancelToken[UIO]", "member" : "monix.bio.Fiber.cancel", "link" : "monix\/bio\/Fiber.html#cancel:cats.effect.CancelToken[monix.bio.UIO]", "kind" : "abstract def"}], "shortDescription" : "Fiber represents the (pure) result of a Task being started concurrentlyand that can be either joined or cancelled."}, {"name" : "monix.bio.Task", "shortDescription" : "Task represents a specification for a possibly lazy orasynchronous computation, which when executed will produce an Aas a result, along with possible side-effects.", "object" : "monix\/bio\/Task$.html", "members_class" : [{"label" : "void", "tail" : "(): Task[E, Unit]", "member" : "monix.bio.Task.void", "link" : "monix\/bio\/Task.html#void:monix.bio.Task[E,Unit]", "kind" : "final def"}, {"label" : "redeemCauseWith", "tail" : "(recover: (Cause[E]) => Task[E1, B], bind: (A) => Task[E1, B]): Task[E1, B]", "member" : "monix.bio.Task.redeemCauseWith", "link" : "monix\/bio\/Task.html#redeemCauseWith[E1,B](recover:monix.bio.Cause[E]=>monix.bio.Task[E1,B],bind:A=>monix.bio.Task[E1,B]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "redeemCause", "tail" : "(recover: (Cause[E]) => B, map: (A) => B): UIO[B]", "member" : "monix.bio.Task.redeemCause", "link" : "monix\/bio\/Task.html#redeemCause[B](recover:monix.bio.Cause[E]=>B,map:A=>B):monix.bio.UIO[B]", "kind" : "final def"}, {"label" : "hideErrorsWith", "tail" : "(f: (E) => Throwable): UIO[A]", "member" : "monix.bio.Task.hideErrorsWith", "link" : "monix\/bio\/Task.html#hideErrorsWith(f:E=>Throwable):monix.bio.UIO[A]", "kind" : "final def"}, {"label" : "hideErrors", "tail" : "(E: <:<[E, Throwable]): UIO[A]", "member" : "monix.bio.Task.hideErrors", "link" : "monix\/bio\/Task.html#hideErrors(implicitE:E<:<Throwable):monix.bio.UIO[A]", "kind" : "final def"}, {"label" : "timeoutToL", "tail" : "(after: UIO[FiniteDuration], backup: Task[E1, B]): Task[E1, B]", "member" : "monix.bio.Task.timeoutToL", "link" : "monix\/bio\/Task.html#timeoutToL[E1>:E,B>:A](after:monix.bio.UIO[scala.concurrent.duration.FiniteDuration],backup:monix.bio.Task[E1,B]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "timeoutL", "tail" : "(after: UIO[FiniteDuration]): Task[E, Option[A]]", "member" : "monix.bio.Task.timeoutL", "link" : "monix\/bio\/Task.html#timeoutL(after:monix.bio.UIO[scala.concurrent.duration.FiniteDuration]):monix.bio.Task[E,Option[A]]", "kind" : "final def"}, {"label" : "timeoutTo", "tail" : "(after: FiniteDuration, backup: Task[E1, B]): Task[E1, B]", "member" : "monix.bio.Task.timeoutTo", "link" : "monix\/bio\/Task.html#timeoutTo[E1>:E,B>:A](after:scala.concurrent.duration.FiniteDuration,backup:monix.bio.Task[E1,B]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "timeoutWith", "tail" : "(after: FiniteDuration, error: E1): Task[E1, B]", "member" : "monix.bio.Task.timeoutWith", "link" : "monix\/bio\/Task.html#timeoutWith[E1>:E,B>:A](after:scala.concurrent.duration.FiniteDuration,error:E1):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "timeout", "tail" : "(after: FiniteDuration): Task[E, Option[A]]", "member" : "monix.bio.Task.timeout", "link" : "monix\/bio\/Task.html#timeout(after:scala.concurrent.duration.FiniteDuration):monix.bio.Task[E,Option[A]]", "kind" : "final def"}, {"label" : "timed", "tail" : "(): Task[E, (FiniteDuration, A)]", "member" : "monix.bio.Task.timed", "link" : "monix\/bio\/Task.html#timed:monix.bio.Task[E,(scala.concurrent.duration.FiniteDuration,A)]", "kind" : "final def"}, {"label" : "uncancelable", "tail" : "(): Task[E, A]", "member" : "monix.bio.Task.uncancelable", "link" : "monix\/bio\/Task.html#uncancelable:monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "redeemWith", "tail" : "(recover: (E) => Task[E1, B], bind: (A) => Task[E1, B]): Task[E1, B]", "member" : "monix.bio.Task.redeemWith", "link" : "monix\/bio\/Task.html#redeemWith[E1,B](recover:E=>monix.bio.Task[E1,B],bind:A=>monix.bio.Task[E1,B]):monix.bio.Task[E1,B]", "kind" : "def"}, {"label" : "redeem", "tail" : "(recover: (E) => B, map: (A) => B): UIO[B]", "member" : "monix.bio.Task.redeem", "link" : "monix\/bio\/Task.html#redeem[B](recover:E=>B,map:A=>B):monix.bio.UIO[B]", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "monix.bio.Task.toString", "link" : "monix\/bio\/Task.html#toString():String", "kind" : "def"}, {"label" : "toReactivePublisher", "tail" : "(s: Scheduler, ev: <:<[E, Throwable]): Publisher[A]", "member" : "monix.bio.Task.toReactivePublisher", "link" : "monix\/bio\/Task.html#toReactivePublisher(implicits:monix.execution.Scheduler,implicitev:E<:<Throwable):org.reactivestreams.Publisher[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "toAsync", "tail" : "(F: Async[F], eff: Effect[Unsafe], ev: <:<[E, Throwable]): F[A]", "member" : "monix.bio.Task.toAsync", "link" : "monix\/bio\/Task.html#toAsync[F[_]](implicitF:cats.effect.Async[F],impliciteff:cats.effect.Effect[monix.bio.Task.Unsafe],implicitev:E<:<Throwable):F[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "toConcurrent", "tail" : "(F: Concurrent[F], eff: ConcurrentEffect[Unsafe], ev: <:<[E, Throwable]): F[A]", "member" : "monix.bio.Task.toConcurrent", "link" : "monix\/bio\/Task.html#toConcurrent[F[_]](implicitF:cats.effect.Concurrent[F],impliciteff:cats.effect.ConcurrentEffect[monix.bio.Task.Unsafe],implicitev:E<:<Throwable):F[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "to", "tail" : "(F: TaskLift[F], ev: <:<[E, Throwable]): F[A]", "member" : "monix.bio.Task.to", "link" : "monix\/bio\/Task.html#to[F[_]](implicitF:monix.bio.TaskLift[F],implicitev:E<:<Throwable):F[A@scala.annotation.unchecked.uncheckedVariance]", "kind" : "final def"}, {"label" : "start", "tail" : "(): UIO[Fiber[E, A]]", "member" : "monix.bio.Task.start", "link" : "monix\/bio\/Task.html#start:monix.bio.UIO[monix.bio.Fiber[E@scala.annotation.unchecked.uncheckedVariance,A@scala.annotation.unchecked.uncheckedVariance]]", "kind" : "final def"}, {"label" : "onErrorRecover", "tail" : "(pf: PartialFunction[E, U]): Task[E1, U]", "member" : "monix.bio.Task.onErrorRecover", "link" : "monix\/bio\/Task.html#onErrorRecover[E1>:E,U>:A](pf:PartialFunction[E,U]):monix.bio.Task[E1,U]", "kind" : "final def"}, {"label" : "onErrorHandle", "tail" : "(f: (E) => U): UIO[U]", "member" : "monix.bio.Task.onErrorHandle", "link" : "monix\/bio\/Task.html#onErrorHandle[U>:A](f:E=>U):monix.bio.UIO[U]", "kind" : "final def"}, {"label" : "mapError", "tail" : "(f: (E) => E1): Task[E1, A]", "member" : "monix.bio.Task.mapError", "link" : "monix\/bio\/Task.html#mapError[E1](f:E=>E1):monix.bio.Task[E1,A]", "kind" : "final def"}, {"label" : "bimap", "tail" : "(fe: (E) => E1, fa: (A) => B): Task[E1, B]", "member" : "monix.bio.Task.bimap", "link" : "monix\/bio\/Task.html#bimap[E1,B](fe:E=>E1,fa:A=>B):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "onErrorRestartLoop", "tail" : "(initial: S)(f: (E1, S, (S) => Task[E1, B]) => Task[E1, B]): Task[E1, B]", "member" : "monix.bio.Task.onErrorRestartLoop", "link" : "monix\/bio\/Task.html#onErrorRestartLoop[S,E1>:E,B>:A](initial:S)(f:(E1,S,S=>monix.bio.Task[E1,B])=>monix.bio.Task[E1,B]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "onErrorRestartIf", "tail" : "(p: (E) => Boolean): Task[E, A]", "member" : "monix.bio.Task.onErrorRestartIf", "link" : "monix\/bio\/Task.html#onErrorRestartIf(p:E=>Boolean):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "onErrorRestart", "tail" : "(maxRetries: Long): Task[E, A]", "member" : "monix.bio.Task.onErrorRestart", "link" : "monix\/bio\/Task.html#onErrorRestart(maxRetries:Long):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "tapError", "tail" : "(f: (E) => Task[E1, B]): Task[E1, A]", "member" : "monix.bio.Task.tapError", "link" : "monix\/bio\/Task.html#tapError[E1>:E,B](f:E=>monix.bio.Task[E1,B]):monix.bio.Task[E1,A]", "kind" : "final def"}, {"label" : "map", "tail" : "(f: (A) => B): Task[E, B]", "member" : "monix.bio.Task.map", "link" : "monix\/bio\/Task.html#map[B](f:A=>B):monix.bio.Task[E,B]", "kind" : "final def"}, {"label" : "restartUntil", "tail" : "(p: (A) => Boolean): Task[E, A]", "member" : "monix.bio.Task.restartUntil", "link" : "monix\/bio\/Task.html#restartUntil(p:A=>Boolean):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "onErrorFallbackTo", "tail" : "(that: Task[E1, B]): Task[E1, B]", "member" : "monix.bio.Task.onErrorFallbackTo", "link" : "monix\/bio\/Task.html#onErrorFallbackTo[E1,B>:A](that:monix.bio.Task[E1,B]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "onErrorHandleWith", "tail" : "(f: (E) => Task[E1, B]): Task[E1, B]", "member" : "monix.bio.Task.onErrorHandleWith", "link" : "monix\/bio\/Task.html#onErrorHandleWith[E1,B>:A](f:E=>monix.bio.Task[E1,B]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "onErrorRecoverWith", "tail" : "(pf: PartialFunction[E, Task[E1, B]]): Task[E1, B]", "member" : "monix.bio.Task.onErrorRecoverWith", "link" : "monix\/bio\/Task.html#onErrorRecoverWith[E1>:E,B>:A](pf:PartialFunction[E,monix.bio.Task[E1,B]]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "onCancelRaiseError", "tail" : "(e: E1): Task[E1, A]", "member" : "monix.bio.Task.onCancelRaiseError", "link" : "monix\/bio\/Task.html#onCancelRaiseError[E1>:E](e:E1):monix.bio.Task[E1,A]", "kind" : "final def"}, {"label" : "dematerialize", "tail" : "(evE: <:<[E, Nothing], evA: <:<[A, Try[B]]): Unsafe[B]", "member" : "monix.bio.Task.dematerialize", "link" : "monix\/bio\/Task.html#dematerialize[B](implicitevE:E<:<Nothing,implicitevA:A<:<scala.util.Try[B]):monix.bio.Task.Unsafe[B]", "kind" : "final def"}, {"label" : "materialize", "tail" : "(ev: <:<[E, Throwable]): UIO[Try[A]]", "member" : "monix.bio.Task.materialize", "link" : "monix\/bio\/Task.html#materialize(implicitev:E<:<Throwable):monix.bio.UIO[scala.util.Try[A]]", "kind" : "final def"}, {"label" : "doOnCancel", "tail" : "(callback: UIO[Unit]): Task[E, A]", "member" : "monix.bio.Task.doOnCancel", "link" : "monix\/bio\/Task.html#doOnCancel(callback:monix.bio.UIO[Unit]):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "doOnFinish", "tail" : "(f: (Option[Cause[E]]) => UIO[Unit]): Task[E, A]", "member" : "monix.bio.Task.doOnFinish", "link" : "monix\/bio\/Task.html#doOnFinish(f:Option[monix.bio.Cause[E]]=>monix.bio.UIO[Unit]):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "startAndForget", "tail" : "(): UIO[Unit]", "member" : "monix.bio.Task.startAndForget", "link" : "monix\/bio\/Task.html#startAndForget:monix.bio.UIO[Unit]", "kind" : "final def"}, {"label" : "loopForever", "tail" : "(): Task[E, Nothing]", "member" : "monix.bio.Task.loopForever", "link" : "monix\/bio\/Task.html#loopForever:monix.bio.Task[E,Nothing]", "kind" : "final def"}, {"label" : "foreach", "tail" : "(f: (Either[E, A]) => Unit)(s: Scheduler): Unit", "member" : "monix.bio.Task.foreach", "link" : "monix\/bio\/Task.html#foreach(f:Either[E,A]=>Unit)(implicits:monix.execution.Scheduler):Unit", "kind" : "final def"}, {"label" : "foreachL", "tail" : "(f: (A) => Unit): Task[E, Unit]", "member" : "monix.bio.Task.foreachL", "link" : "monix\/bio\/Task.html#foreachL(f:A=>Unit):monix.bio.Task[E,Unit]", "kind" : "final def"}, {"label" : "flatten", "tail" : "(ev: <:<[A, Task[E1, B]]): Task[E1, B]", "member" : "monix.bio.Task.flatten", "link" : "monix\/bio\/Task.html#flatten[E1>:E,B](implicitev:A<:<monix.bio.Task[E1,B]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "flatMapLoop", "tail" : "(seed: S)(f: (A, S, (S) => Task[E1, S]) => Task[E1, S]): Task[E1, S]", "member" : "monix.bio.Task.flatMapLoop", "link" : "monix\/bio\/Task.html#flatMapLoop[E1>:E,S](seed:S)(f:(A,S,S=>monix.bio.Task[E1,S])=>monix.bio.Task[E1,S]):monix.bio.Task[E1,S]", "kind" : "final def"}, {"label" : "flatMap", "tail" : "(f: (A) => Task[E1, B]): Task[E1, B]", "member" : "monix.bio.Task.flatMap", "link" : "monix\/bio\/Task.html#flatMap[E1>:E,B](f:A=>monix.bio.Task[E1,B]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "flipWith", "tail" : "(f: (Task[A, E]) => Task[A1, E1]): Task[E1, A1]", "member" : "monix.bio.Task.flipWith", "link" : "monix\/bio\/Task.html#flipWith[E1,A1](f:monix.bio.Task[A,E]=>monix.bio.Task[A1,E1]):monix.bio.Task[E1,A1]", "kind" : "final def"}, {"label" : "flip", "tail" : "(): Task[A, E]", "member" : "monix.bio.Task.flip", "link" : "monix\/bio\/Task.html#flip:monix.bio.Task[A,E]", "kind" : "final def"}, {"label" : "failed", "tail" : "(): UIO[E]", "member" : "monix.bio.Task.failed", "link" : "monix\/bio\/Task.html#failed:monix.bio.UIO[E]", "kind" : "final def"}, {"label" : "executeWithOptions", "tail" : "(f: (Options) => Options): Task[E, A]", "member" : "monix.bio.Task.executeWithOptions", "link" : "monix\/bio\/Task.html#executeWithOptions(f:monix.bio.Task.Options=>monix.bio.Task.Options):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "executeWithModel", "tail" : "(em: ExecutionModel): Task[E, A]", "member" : "monix.bio.Task.executeWithModel", "link" : "monix\/bio\/Task.html#executeWithModel(em:monix.execution.ExecutionModel):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "executeAsync", "tail" : "(): Task[E, A]", "member" : "monix.bio.Task.executeAsync", "link" : "monix\/bio\/Task.html#executeAsync:monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "executeOn", "tail" : "(s: Scheduler, forceAsync: Boolean): Task[E, A]", "member" : "monix.bio.Task.executeOn", "link" : "monix\/bio\/Task.html#executeOn(s:monix.execution.Scheduler,forceAsync:Boolean):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "delayResult", "tail" : "(timespan: FiniteDuration): Task[E, A]", "member" : "monix.bio.Task.delayResult", "link" : "monix\/bio\/Task.html#delayResult(timespan:scala.concurrent.duration.FiniteDuration):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "delayExecution", "tail" : "(timespan: FiniteDuration): Task[E, A]", "member" : "monix.bio.Task.delayExecution", "link" : "monix\/bio\/Task.html#delayExecution(timespan:scala.concurrent.duration.FiniteDuration):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "guaranteeCase", "tail" : "(finalizer: (ExitCase[Cause[E]]) => UIO[Unit]): Task[E, A]", "member" : "monix.bio.Task.guaranteeCase", "link" : "monix\/bio\/Task.html#guaranteeCase(finalizer:cats.effect.ExitCase[monix.bio.Cause[E]]=>monix.bio.UIO[Unit]):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "guarantee", "tail" : "(finalizer: UIO[Unit]): Task[E, A]", "member" : "monix.bio.Task.guarantee", "link" : "monix\/bio\/Task.html#guarantee(finalizer:monix.bio.UIO[Unit]):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "bracketE", "tail" : "(use: (A) => Task[E1, B])(release: (A, Either[Option[Cause[E1]], B]) => UIO[Unit]): Task[E1, B]", "member" : "monix.bio.Task.bracketE", "link" : "monix\/bio\/Task.html#bracketE[E1>:E,B](use:A=>monix.bio.Task[E1,B])(release:(A,Either[Option[monix.bio.Cause[E1]],B])=>monix.bio.UIO[Unit]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "bracketCase", "tail" : "(use: (A) => Task[E1, B])(release: (A, ExitCase[Cause[E1]]) => UIO[Unit]): Task[E1, B]", "member" : "monix.bio.Task.bracketCase", "link" : "monix\/bio\/Task.html#bracketCase[E1>:E,B](use:A=>monix.bio.Task[E1,B])(release:(A,cats.effect.ExitCase[monix.bio.Cause[E1]])=>monix.bio.UIO[Unit]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "bracket", "tail" : "(use: (A) => Task[E1, B])(release: (A) => UIO[Unit]): Task[E1, B]", "member" : "monix.bio.Task.bracket", "link" : "monix\/bio\/Task.html#bracket[E1>:E,B](use:A=>monix.bio.Task[E1,B])(release:A=>monix.bio.UIO[Unit]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(s: Scheduler): Task[E, A]", "member" : "monix.bio.Task.asyncBoundary", "link" : "monix\/bio\/Task.html#asyncBoundary(s:monix.execution.Scheduler):monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "asyncBoundary", "tail" : "(): Task[E, A]", "member" : "monix.bio.Task.asyncBoundary", "link" : "monix\/bio\/Task.html#asyncBoundary:monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : ">>", "tail" : "(tb: => Task[E1, B]): Task[E1, B]", "member" : "monix.bio.Task.>>", "link" : "monix\/bio\/Task.html#>>[E1>:E,B](tb:=>monix.bio.Task[E1,B]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "rethrow", "tail" : "(ev: <:<[A, Either[E1, B]]): Task[E1, B]", "member" : "monix.bio.Task.rethrow", "link" : "monix\/bio\/Task.html#rethrow[E1>:E,B](implicitev:A<:<Either[E1,B]):monix.bio.Task[E1,B]", "kind" : "final def"}, {"label" : "attempt", "tail" : "(): UIO[Either[E, A]]", "member" : "monix.bio.Task.attempt", "link" : "monix\/bio\/Task.html#attempt:monix.bio.UIO[Either[E,A]]", "kind" : "final def"}, {"label" : "memoizeOnSuccess", "tail" : "(): Task[E, A]", "member" : "monix.bio.Task.memoizeOnSuccess", "link" : "monix\/bio\/Task.html#memoizeOnSuccess:monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "memoize", "tail" : "(): Task[E, A]", "member" : "monix.bio.Task.memoize", "link" : "monix\/bio\/Task.html#memoize:monix.bio.Task[E,A]", "kind" : "final def"}, {"label" : "runSyncUnsafeOpt", "tail" : "(timeout: Duration)(s: Scheduler, opts: Options, permit: CanBlock, ev: <:<[E, Throwable]): A", "member" : "monix.bio.Task.runSyncUnsafeOpt", "link" : "monix\/bio\/Task.html#runSyncUnsafeOpt(timeout:scala.concurrent.duration.Duration)(implicits:monix.execution.Scheduler,implicitopts:monix.bio.Task.Options,implicitpermit:monix.execution.schedulers.CanBlock,implicitev:E<:<Throwable):A", "kind" : "final def"}, {"label" : "runSyncUnsafe", "tail" : "(timeout: Duration)(s: Scheduler, permit: CanBlock, ev: <:<[E, Throwable]): A", "member" : "monix.bio.Task.runSyncUnsafe", "link" : "monix\/bio\/Task.html#runSyncUnsafe(timeout:scala.concurrent.duration.Duration)(implicits:monix.execution.Scheduler,implicitpermit:monix.execution.schedulers.CanBlock,implicitev:E<:<Throwable):A", "kind" : "final def"}, {"label" : "runSyncStepOpt", "tail" : "(s: Scheduler, opts: Options): Either[Task[E, A], A]", "member" : "monix.bio.Task.runSyncStepOpt", "link" : "monix\/bio\/Task.html#runSyncStepOpt(implicits:monix.execution.Scheduler,implicitopts:monix.bio.Task.Options):Either[monix.bio.Task[E,A],A]", "kind" : "final def"}, {"label" : "runSyncStep", "tail" : "(s: Scheduler): Either[Task[E, A], A]", "member" : "monix.bio.Task.runSyncStep", "link" : "monix\/bio\/Task.html#runSyncStep(implicits:monix.execution.Scheduler):Either[monix.bio.Task[E,A],A]", "kind" : "final def"}, {"label" : "runAsyncUncancelableOpt", "tail" : "(cb: (Either[Cause[E], A]) => Unit)(s: Scheduler, opts: Options): Unit", "member" : "monix.bio.Task.runAsyncUncancelableOpt", "link" : "monix\/bio\/Task.html#runAsyncUncancelableOpt(cb:Either[monix.bio.Cause[E],A]=>Unit)(implicits:monix.execution.Scheduler,implicitopts:monix.bio.Task.Options):Unit", "kind" : "def"}, {"label" : "runAsyncUncancelable", "tail" : "(cb: (Either[Cause[E], A]) => Unit)(s: Scheduler): Unit", "member" : "monix.bio.Task.runAsyncUncancelable", "link" : "monix\/bio\/Task.html#runAsyncUncancelable(cb:Either[monix.bio.Cause[E],A]=>Unit)(implicits:monix.execution.Scheduler):Unit", "kind" : "final def"}, {"label" : "runAsyncAndForgetOpt", "tail" : "(s: Scheduler, opts: Options): Unit", "member" : "monix.bio.Task.runAsyncAndForgetOpt", "link" : "monix\/bio\/Task.html#runAsyncAndForgetOpt(implicits:monix.execution.Scheduler,implicitopts:monix.bio.Task.Options):Unit", "kind" : "def"}, {"label" : "runAsyncAndForget", "tail" : "(s: Scheduler): Unit", "member" : "monix.bio.Task.runAsyncAndForget", "link" : "monix\/bio\/Task.html#runAsyncAndForget(implicits:monix.execution.Scheduler):Unit", "kind" : "final def"}, {"label" : "runAsyncOptF", "tail" : "(cb: (Either[Cause[E], A]) => Unit)(s: Scheduler, opts: Options): CancelToken[UIO]", "member" : "monix.bio.Task.runAsyncOptF", "link" : "monix\/bio\/Task.html#runAsyncOptF(cb:Either[monix.bio.Cause[E],A]=>Unit)(implicits:monix.execution.Scheduler,implicitopts:monix.bio.Task.Options):cats.effect.CancelToken[monix.bio.UIO]", "kind" : "def"}, {"label" : "runAsyncF", "tail" : "(cb: (Either[Cause[E], A]) => Unit)(s: Scheduler): CancelToken[UIO]", "member" : "monix.bio.Task.runAsyncF", "link" : "monix\/bio\/Task.html#runAsyncF(cb:Either[monix.bio.Cause[E],A]=>Unit)(implicits:monix.execution.Scheduler):cats.effect.CancelToken[monix.bio.UIO]", "kind" : "final def"}, {"label" : "runAsyncOpt", "tail" : "(cb: (Either[Cause[E], A]) => Unit)(s: Scheduler, opts: Options): Cancelable", "member" : "monix.bio.Task.runAsyncOpt", "link" : "monix\/bio\/Task.html#runAsyncOpt(cb:Either[monix.bio.Cause[E],A]=>Unit)(implicits:monix.execution.Scheduler,implicitopts:monix.bio.Task.Options):monix.execution.Cancelable", "kind" : "def"}, {"label" : "runAsync", "tail" : "(cb: (Either[Cause[E], A]) => Unit)(s: Scheduler): Cancelable", "member" : "monix.bio.Task.runAsync", "link" : "monix\/bio\/Task.html#runAsync(cb:Either[monix.bio.Cause[E],A]=>Unit)(implicits:monix.execution.Scheduler):monix.execution.Cancelable", "kind" : "final def"}, {"label" : "runToFutureOpt", "tail" : "(s: Scheduler, opts: Options, ev: <:<[E, Throwable]): CancelableFuture[A]", "member" : "monix.bio.Task.runToFutureOpt", "link" : "monix\/bio\/Task.html#runToFutureOpt(implicits:monix.execution.Scheduler,implicitopts:monix.bio.Task.Options,implicitev:E<:<Throwable):monix.execution.CancelableFuture[A]", "kind" : "def"}, {"label" : "runToFuture", "tail" : "(s: Scheduler, ev: <:<[E, Throwable]): CancelableFuture[A]", "member" : "monix.bio.Task.runToFuture", "link" : "monix\/bio\/Task.html#runToFuture(implicits:monix.execution.Scheduler,implicitev:E<:<Throwable):monix.execution.CancelableFuture[A]", "kind" : "final def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/Task.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/Task.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/Task.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/Task.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/Task.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/Task.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/Task.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Task.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Task.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Task.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/Task.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/Task.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/Task.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/Task.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/Task.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/Task.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/Task.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/Task.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Par", "tail" : "", "member" : "monix.bio.TaskParallelNewtype.Par", "link" : "monix\/bio\/Task$.html#Par", "kind" : "object"}, {"label" : "AsyncBuilder", "tail" : "", "member" : "monix.bio.Task.AsyncBuilder", "link" : "monix\/bio\/Task$.html#AsyncBuilder", "kind" : "object"}, {"label" : "AsyncBuilder", "tail" : "", "member" : "monix.bio.Task.AsyncBuilder", "link" : "monix\/bio\/Task$.html#AsyncBuilder[CancelationToken]extendsAnyRef", "kind" : "abstract class"}, {"label" : "defaultOptions", "tail" : ": Options", "member" : "monix.bio.Task.defaultOptions", "link" : "monix\/bio\/Task$.html#defaultOptions:monix.bio.Task.Options", "kind" : "val"}, {"label" : "Options", "tail" : "", "member" : "monix.bio.Task.Options", "link" : "monix\/bio\/Task$.html#OptionsextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "readOptions", "tail" : ": UIO[Options]", "member" : "monix.bio.Task.readOptions", "link" : "monix\/bio\/Task$.html#readOptions:monix.bio.UIO[monix.bio.Task.Options]", "kind" : "val"}, {"label" : "liftFromEffect", "tail" : "(F: Effect[F]): ~>[F, Unsafe]", "member" : "monix.bio.Task.liftFromEffect", "link" : "monix\/bio\/Task$.html#liftFromEffect[F[_]](implicitF:cats.effect.Effect[F]):F~>monix.bio.Task.Unsafe", "kind" : "def"}, {"label" : "liftFromConcurrentEffect", "tail" : "(F: ConcurrentEffect[F]): ~>[F, Unsafe]", "member" : "monix.bio.Task.liftFromConcurrentEffect", "link" : "monix\/bio\/Task$.html#liftFromConcurrentEffect[F[_]](implicitF:cats.effect.ConcurrentEffect[F]):F~>monix.bio.Task.Unsafe", "kind" : "def"}, {"label" : "liftFrom", "tail" : "(F: TaskLike[F]): ~>[F, Unsafe]", "member" : "monix.bio.Task.liftFrom", "link" : "monix\/bio\/Task$.html#liftFrom[F[_]](implicitF:monix.bio.TaskLike[F]):F~>monix.bio.Task.Unsafe", "kind" : "def"}, {"label" : "liftToConcurrent", "tail" : "(F: Concurrent[F], eff: ConcurrentEffect[Unsafe]): ~>[Unsafe, F]", "member" : "monix.bio.Task.liftToConcurrent", "link" : "monix\/bio\/Task$.html#liftToConcurrent[F[_]](implicitF:cats.effect.Concurrent[F],impliciteff:cats.effect.ConcurrentEffect[monix.bio.Task.Unsafe]):monix.bio.Task.Unsafe~>F", "kind" : "def"}, {"label" : "liftToAsync", "tail" : "(F: cats.effect.Async[F], eff: Effect[Unsafe]): ~>[Unsafe, F]", "member" : "monix.bio.Task.liftToAsync", "link" : "monix\/bio\/Task$.html#liftToAsync[F[_]](implicitF:cats.effect.Async[F],impliciteff:cats.effect.Effect[monix.bio.Task.Unsafe]):monix.bio.Task.Unsafe~>F", "kind" : "def"}, {"label" : "liftTo", "tail" : "(F: TaskLift[F]): ~>[Unsafe, F]", "member" : "monix.bio.Task.liftTo", "link" : "monix\/bio\/Task$.html#liftTo[F[_]](implicitF:monix.bio.TaskLift[F]):monix.bio.Task.Unsafe~>F", "kind" : "def"}, {"label" : "parZip6", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3], fa4: Task[E, A4], fa5: Task[E, A5], fa6: Task[E, A6]): Task[E, (A1, A2, A3, A4, A5, A6)]", "member" : "monix.bio.Task.parZip6", "link" : "monix\/bio\/Task$.html#parZip6[E,A1,A2,A3,A4,A5,A6](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3],fa4:monix.bio.Task[E,A4],fa5:monix.bio.Task[E,A5],fa6:monix.bio.Task[E,A6]):monix.bio.Task[E,(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "parZip5", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3], fa4: Task[E, A4], fa5: Task[E, A5]): Task[E, (A1, A2, A3, A4, A5)]", "member" : "monix.bio.Task.parZip5", "link" : "monix\/bio\/Task$.html#parZip5[E,A1,A2,A3,A4,A5](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3],fa4:monix.bio.Task[E,A4],fa5:monix.bio.Task[E,A5]):monix.bio.Task[E,(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "parZip4", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3], fa4: Task[E, A4]): Task[E, (A1, A2, A3, A4)]", "member" : "monix.bio.Task.parZip4", "link" : "monix\/bio\/Task$.html#parZip4[E,A1,A2,A3,A4](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3],fa4:monix.bio.Task[E,A4]):monix.bio.Task[E,(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "parZip3", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3]): Task[E, (A1, A2, A3)]", "member" : "monix.bio.Task.parZip3", "link" : "monix\/bio\/Task$.html#parZip3[E,A1,A2,A3](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3]):monix.bio.Task[E,(A1,A2,A3)]", "kind" : "def"}, {"label" : "parZip2", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2]): Task[E, (A1, A2)]", "member" : "monix.bio.Task.parZip2", "link" : "monix\/bio\/Task$.html#parZip2[E,A1,A2,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2]):monix.bio.Task[E,(A1,A2)]", "kind" : "def"}, {"label" : "parMap6", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3], fa4: Task[E, A4], fa5: Task[E, A5], fa6: Task[E, A6])(f: (A1, A2, A3, A4, A5, A6) => R): Task[E, R]", "member" : "monix.bio.Task.parMap6", "link" : "monix\/bio\/Task$.html#parMap6[E,A1,A2,A3,A4,A5,A6,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3],fa4:monix.bio.Task[E,A4],fa5:monix.bio.Task[E,A5],fa6:monix.bio.Task[E,A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "parMap5", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3], fa4: Task[E, A4], fa5: Task[E, A5])(f: (A1, A2, A3, A4, A5) => R): Task[E, R]", "member" : "monix.bio.Task.parMap5", "link" : "monix\/bio\/Task$.html#parMap5[E,A1,A2,A3,A4,A5,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3],fa4:monix.bio.Task[E,A4],fa5:monix.bio.Task[E,A5])(f:(A1,A2,A3,A4,A5)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "parMap4", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3], fa4: Task[E, A4])(f: (A1, A2, A3, A4) => R): Task[E, R]", "member" : "monix.bio.Task.parMap4", "link" : "monix\/bio\/Task$.html#parMap4[E,A1,A2,A3,A4,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3],fa4:monix.bio.Task[E,A4])(f:(A1,A2,A3,A4)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "parMap3", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3])(f: (A1, A2, A3) => R): Task[E, R]", "member" : "monix.bio.Task.parMap3", "link" : "monix\/bio\/Task$.html#parMap3[E,A1,A2,A3,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3])(f:(A1,A2,A3)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "parMap2", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2])(f: (A1, A2) => R): Task[E, R]", "member" : "monix.bio.Task.parMap2", "link" : "monix\/bio\/Task$.html#parMap2[E,A1,A2,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2])(f:(A1,A2)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "map6", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3], fa4: Task[E, A4], fa5: Task[E, A5], fa6: Task[E, A6])(f: (A1, A2, A3, A4, A5, A6) => R): Task[E, R]", "member" : "monix.bio.Task.map6", "link" : "monix\/bio\/Task$.html#map6[E,A1,A2,A3,A4,A5,A6,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3],fa4:monix.bio.Task[E,A4],fa5:monix.bio.Task[E,A5],fa6:monix.bio.Task[E,A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "map5", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3], fa4: Task[E, A4], fa5: Task[E, A5])(f: (A1, A2, A3, A4, A5) => R): Task[E, R]", "member" : "monix.bio.Task.map5", "link" : "monix\/bio\/Task$.html#map5[E,A1,A2,A3,A4,A5,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3],fa4:monix.bio.Task[E,A4],fa5:monix.bio.Task[E,A5])(f:(A1,A2,A3,A4,A5)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "map4", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3], fa4: Task[E, A4])(f: (A1, A2, A3, A4) => R): Task[E, R]", "member" : "monix.bio.Task.map4", "link" : "monix\/bio\/Task$.html#map4[E,A1,A2,A3,A4,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3],fa4:monix.bio.Task[E,A4])(f:(A1,A2,A3,A4)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "map3", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2], fa3: Task[E, A3])(f: (A1, A2, A3) => R): Task[E, R]", "member" : "monix.bio.Task.map3", "link" : "monix\/bio\/Task$.html#map3[E,A1,A2,A3,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2],fa3:monix.bio.Task[E,A3])(f:(A1,A2,A3)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2])(f: (A1, A2) => R): Task[E, R]", "member" : "monix.bio.Task.map2", "link" : "monix\/bio\/Task$.html#map2[E,A1,A2,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2])(f:(A1,A2)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "mapBoth", "tail" : "(fa1: Task[E, A1], fa2: Task[E, A2])(f: (A1, A2) => R): Task[E, R]", "member" : "monix.bio.Task.mapBoth", "link" : "monix\/bio\/Task$.html#mapBoth[E,A1,A2,R](fa1:monix.bio.Task[E,A1],fa2:monix.bio.Task[E,A2])(f:(A1,A2)=>R):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "parTraverseUnordered", "tail" : "(in: Iterable[A])(f: (A) => Task[E, B]): Task[E, List[B]]", "member" : "monix.bio.Task.parTraverseUnordered", "link" : "monix\/bio\/Task$.html#parTraverseUnordered[E,A,B](in:Iterable[A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,List[B]]", "kind" : "def"}, {"label" : "parSequenceUnordered", "tail" : "(in: Iterable[Task[E, A]]): Task[E, List[A]]", "member" : "monix.bio.Task.parSequenceUnordered", "link" : "monix\/bio\/Task$.html#parSequenceUnordered[E,A](in:Iterable[monix.bio.Task[E,A]]):monix.bio.Task[E,List[A]]", "kind" : "def"}, {"label" : "parTraverseN", "tail" : "(parallelism: Int)(in: Iterable[A])(f: (A) => Task[E, B]): Task[E, List[B]]", "member" : "monix.bio.Task.parTraverseN", "link" : "monix\/bio\/Task$.html#parTraverseN[E,A,B](parallelism:Int)(in:Iterable[A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,List[B]]", "kind" : "def"}, {"label" : "parSequenceN", "tail" : "(parallelism: Int)(in: Iterable[Task[E, A]]): Task[E, List[A]]", "member" : "monix.bio.Task.parSequenceN", "link" : "monix\/bio\/Task$.html#parSequenceN[E,A](parallelism:Int)(in:Iterable[monix.bio.Task[E,A]]):monix.bio.Task[E,List[A]]", "kind" : "def"}, {"label" : "parTraverse", "tail" : "(in: Iterable[A])(f: (A) => Task[E, B]): Task[E, List[B]]", "member" : "monix.bio.Task.parTraverse", "link" : "monix\/bio\/Task$.html#parTraverse[E,A,B](in:Iterable[A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,List[B]]", "kind" : "def"}, {"label" : "parSequence", "tail" : "(in: Iterable[Task[E, A]]): Task[E, List[A]]", "member" : "monix.bio.Task.parSequence", "link" : "monix\/bio\/Task$.html#parSequence[E,A](in:Iterable[monix.bio.Task[E,A]]):monix.bio.Task[E,List[A]]", "kind" : "def"}, {"label" : "traverse", "tail" : "(in: Iterable[A])(f: (A) => Task[E, B]): Task[E, List[B]]", "member" : "monix.bio.Task.traverse", "link" : "monix\/bio\/Task$.html#traverse[E,A,B](in:Iterable[A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,List[B]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(in: Iterable[Task[E, A]]): Task[E, List[A]]", "member" : "monix.bio.Task.sequence", "link" : "monix\/bio\/Task$.html#sequence[E,A](in:Iterable[monix.bio.Task[E,A]]):monix.bio.Task[E,List[A]]", "kind" : "def"}, {"label" : "sleep", "tail" : "(timespan: FiniteDuration): UIO[Unit]", "member" : "monix.bio.Task.sleep", "link" : "monix\/bio\/Task$.html#sleep(timespan:scala.concurrent.duration.FiniteDuration):monix.bio.UIO[Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(ec: ExecutionContext): UIO[Unit]", "member" : "monix.bio.Task.shift", "link" : "monix\/bio\/Task$.html#shift(ec:scala.concurrent.ExecutionContext):monix.bio.UIO[Unit]", "kind" : "def"}, {"label" : "shift", "tail" : ": UIO[Unit]", "member" : "monix.bio.Task.shift", "link" : "monix\/bio\/Task$.html#shift:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "rethrow", "tail" : "(fa: Task[E, Either[E, A]]): Task[E, A]", "member" : "monix.bio.Task.rethrow", "link" : "monix\/bio\/Task$.html#rethrow[E,A](fa:monix.bio.Task[E,Either[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: Task[E, A], fb: Task[E, B]): Task[E, Either[(A, Fiber[E, B]), (Fiber[E, A], B)]]", "member" : "monix.bio.Task.racePair", "link" : "monix\/bio\/Task$.html#racePair[E,A,B](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B]):monix.bio.Task[E,Either[(A,monix.bio.Fiber[E,B]),(monix.bio.Fiber[E,A],B)]]", "kind" : "def"}, {"label" : "raceMany", "tail" : "(tasks: Iterable[Task[E, A]]): Task[E, A]", "member" : "monix.bio.Task.raceMany", "link" : "monix\/bio\/Task$.html#raceMany[E,A](tasks:Iterable[monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "race", "tail" : "(fa: Task[E, A], fb: Task[E, B]): Task[E, Either[A, B]]", "member" : "monix.bio.Task.race", "link" : "monix\/bio\/Task$.html#race[E,A,B](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B]):monix.bio.Task[E,Either[A,B]]", "kind" : "def"}, {"label" : "fromFutureLike", "tail" : "(tfa: Unsafe[F[A]])(F: FutureLift[Unsafe, F]): Unsafe[A]", "member" : "monix.bio.Task.fromFutureLike", "link" : "monix\/bio\/Task$.html#fromFutureLike[F[_],A](tfa:monix.bio.Task.Unsafe[F[A]])(implicitF:monix.catnap.FutureLift[monix.bio.Task.Unsafe,F]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "fromCancelablePromiseEither", "tail" : "(p: CancelablePromise[Either[E, A]]): Task[E, A]", "member" : "monix.bio.Task.fromCancelablePromiseEither", "link" : "monix\/bio\/Task$.html#fromCancelablePromiseEither[E,A](p:monix.execution.CancelablePromise[Either[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "fromCancelablePromise", "tail" : "(p: CancelablePromise[A]): Unsafe[A]", "member" : "monix.bio.Task.fromCancelablePromise", "link" : "monix\/bio\/Task$.html#fromCancelablePromise[A](p:monix.execution.CancelablePromise[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "fromFuture", "tail" : "(f: Future[A]): Unsafe[A]", "member" : "monix.bio.Task.fromFuture", "link" : "monix\/bio\/Task$.html#fromFuture[A](f:scala.concurrent.Future[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "create", "tail" : "(): CreatePartiallyApplied[E, A]", "member" : "monix.bio.Task.create", "link" : "monix\/bio\/Task$.html#create[E,A]:monix.bio.Task.AsyncBuilder.CreatePartiallyApplied[E,A]", "kind" : "def"}, {"label" : "cancelBoundary", "tail" : ": UIO[Unit]", "member" : "monix.bio.Task.cancelBoundary", "link" : "monix\/bio\/Task$.html#cancelBoundary:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "cancelable0", "tail" : "(register: (Scheduler, BiCallback[E, A]) => CancelToken[[β$1$]Task[E, β$1$]]): Task[E, A]", "member" : "monix.bio.Task.cancelable0", "link" : "monix\/bio\/Task$.html#cancelable0[E,A](register:(monix.execution.Scheduler,monix.bio.BiCallback[E,A])=>cats.effect.CancelToken[[β$1$]monix.bio.Task[E,β$1$]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(register: (BiCallback[E, A]) => CancelToken[[β$0$]Task[E, β$0$]]): Task[E, A]", "member" : "monix.bio.Task.cancelable", "link" : "monix\/bio\/Task$.html#cancelable[E,A](register:monix.bio.BiCallback[E,A]=>cats.effect.CancelToken[[β$0$]monix.bio.Task[E,β$0$]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(register: (BiCallback[E, A]) => Task[E, Unit]): Task[E, A]", "member" : "monix.bio.Task.asyncF", "link" : "monix\/bio\/Task$.html#asyncF[E,A](register:monix.bio.BiCallback[E,A]=>monix.bio.Task[E,Unit]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "async0", "tail" : "(register: (Scheduler, BiCallback[E, A]) => Unit): Task[E, A]", "member" : "monix.bio.Task.async0", "link" : "monix\/bio\/Task$.html#async0[E,A](register:(monix.execution.Scheduler,monix.bio.BiCallback[E,A])=>Unit):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "async", "tail" : "(register: (BiCallback[E, A]) => Unit): Task[E, A]", "member" : "monix.bio.Task.async", "link" : "monix\/bio\/Task$.html#async[E,A](register:monix.bio.BiCallback[E,A]=>Unit):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "monix.bio.Task.unit", "link" : "monix\/bio\/Task$.html#unit:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[E, Either[A, B]]): Task[E, B]", "member" : "monix.bio.Task.tailRecM", "link" : "monix\/bio\/Task$.html#tailRecM[E,A,B](a:A)(f:A=>monix.bio.Task[E,Either[A,B]]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "fromTryEither", "tail" : "(a: Try[Either[E, A]]): Task[E, A]", "member" : "monix.bio.Task.fromTryEither", "link" : "monix\/bio\/Task$.html#fromTryEither[E,A](a:scala.util.Try[Either[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(a: Either[E, A]): Task[E, A]", "member" : "monix.bio.Task.fromEither", "link" : "monix\/bio\/Task$.html#fromEither[E,A](a:Either[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(a: Try[A]): Unsafe[A]", "member" : "monix.bio.Task.fromTry", "link" : "monix\/bio\/Task$.html#fromTry[A](a:scala.util.Try[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "fromOptionEval", "tail" : "(opt: Task[E, Option[A]], ifEmpty: => E1): Task[E1, A]", "member" : "monix.bio.Task.fromOptionEval", "link" : "monix\/bio\/Task$.html#fromOptionEval[E,E1>:E,A](opt:monix.bio.Task[E,Option[A]],ifEmpty:=>E1):monix.bio.Task[E1,A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(opt: Option[A], ifEmpty: => E): Task[E, A]", "member" : "monix.bio.Task.fromOption", "link" : "monix\/bio\/Task$.html#fromOption[E,A](opt:Option[A],ifEmpty:=>E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(opt: Option[A]): Task[Unit, A]", "member" : "monix.bio.Task.fromOption", "link" : "monix\/bio\/Task$.html#fromOption[A](opt:Option[A]):monix.bio.Task[Unit,A]", "kind" : "def"}, {"label" : "fromEffect", "tail" : "(fa: F[A])(F: Effect[F]): Unsafe[A]", "member" : "monix.bio.Task.fromEffect", "link" : "monix\/bio\/Task$.html#fromEffect[F[_],A](fa:F[A])(implicitF:cats.effect.Effect[F]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "fromConcurrentEffect", "tail" : "(fa: F[A])(F: ConcurrentEffect[F]): Unsafe[A]", "member" : "monix.bio.Task.fromConcurrentEffect", "link" : "monix\/bio\/Task$.html#fromConcurrentEffect[F[_],A](fa:F[A])(implicitF:cats.effect.ConcurrentEffect[F]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "fromReactivePublisher", "tail" : "(source: Publisher[A]): Unsafe[Option[A]]", "member" : "monix.bio.Task.fromReactivePublisher", "link" : "monix\/bio\/Task$.html#fromReactivePublisher[A](source:org.reactivestreams.Publisher[A]):monix.bio.Task.Unsafe[Option[A]]", "kind" : "def"}, {"label" : "from", "tail" : "(fa: F[A])(F: TaskLike[F]): Unsafe[A]", "member" : "monix.bio.Task.from", "link" : "monix\/bio\/Task$.html#from[F[_],A](fa:F[A])(implicitF:monix.bio.TaskLike[F]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): UIO[A]", "member" : "monix.bio.Task.never", "link" : "monix\/bio\/Task$.html#never[A]:monix.bio.UIO[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(a: => A): Unsafe[A]", "member" : "monix.bio.Task.delay", "link" : "monix\/bio\/Task$.html#delay[A](a:=>A):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "evalAsync", "tail" : "(a: => A): Unsafe[A]", "member" : "monix.bio.Task.evalAsync", "link" : "monix\/bio\/Task$.html#evalAsync[A](a:=>A):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "evalTotal", "tail" : "(a: => A): UIO[A]", "member" : "monix.bio.Task.evalTotal", "link" : "monix\/bio\/Task$.html#evalTotal[A](a:=>A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: => A): Unsafe[A]", "member" : "monix.bio.Task.eval", "link" : "monix\/bio\/Task$.html#eval[A](a:=>A):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "evalOnce", "tail" : "(a: => A): Unsafe[A]", "member" : "monix.bio.Task.evalOnce", "link" : "monix\/bio\/Task$.html#evalOnce[A](a:=>A):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "suspendTotal", "tail" : "(fa: => Task[E, A]): Task[E, A]", "member" : "monix.bio.Task.suspendTotal", "link" : "monix\/bio\/Task$.html#suspendTotal[E,A](fa:=>monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "monix.bio.Task.suspend", "link" : "monix\/bio\/Task$.html#suspend[A](fa:=>monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "deferFutureAction", "tail" : "(f: (Scheduler) => Future[A]): Unsafe[A]", "member" : "monix.bio.Task.deferFutureAction", "link" : "monix\/bio\/Task$.html#deferFutureAction[A](f:monix.execution.Scheduler=>scala.concurrent.Future[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "deferFuture", "tail" : "(fa: => Future[A]): Unsafe[A]", "member" : "monix.bio.Task.deferFuture", "link" : "monix\/bio\/Task$.html#deferFuture[A](fa:=>scala.concurrent.Future[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "deferAction", "tail" : "(f: (Scheduler) => Task[E, A]): Task[E, A]", "member" : "monix.bio.Task.deferAction", "link" : "monix\/bio\/Task$.html#deferAction[E,A](f:monix.execution.Scheduler=>monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "deferTotal", "tail" : "(fa: => Task[E, A]): Task[E, A]", "member" : "monix.bio.Task.deferTotal", "link" : "monix\/bio\/Task$.html#deferTotal[E,A](fa:=>monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "monix.bio.Task.defer", "link" : "monix\/bio\/Task$.html#defer[A](fa:=>monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "terminate", "tail" : "(ex: Throwable): UIO[Nothing]", "member" : "monix.bio.Task.terminate", "link" : "monix\/bio\/Task$.html#terminate(ex:Throwable):monix.bio.UIO[Nothing]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(ex: E): Task[E, Nothing]", "member" : "monix.bio.Task.raiseError", "link" : "monix\/bio\/Task$.html#raiseError[E](ex:E):monix.bio.Task[E,Nothing]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): UIO[A]", "member" : "monix.bio.Task.pure", "link" : "monix\/bio\/Task$.html#pure[A](a:A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): UIO[A]", "member" : "monix.bio.Task.now", "link" : "monix\/bio\/Task$.html#now[A](a:A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: => A): Unsafe[A]", "member" : "monix.bio.Task.apply", "link" : "monix\/bio\/Task$.html#apply[A](a:=>A):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "Unsafe", "tail" : "", "member" : "monix.bio.Task.Unsafe", "link" : "monix\/bio\/Task$.html#Unsafe[+A]=monix.bio.Task[Throwable,A]", "kind" : "type"}, {"label" : "Safe", "tail" : "", "member" : "monix.bio.Task.Safe", "link" : "monix\/bio\/Task$.html#Safe[+A]=monix.bio.Task[Nothing,A]", "kind" : "type"}, {"label" : "catsMonoid", "tail" : "(A: Monoid[A]): Monoid[Task[E, A]]", "member" : "monix.bio.TaskInstancesLevel0.catsMonoid", "link" : "monix\/bio\/Task$.html#catsMonoid[E,A](implicitA:cats.Monoid[A]):cats.Monoid[monix.bio.Task[E,A]]", "kind" : "implicit def"}, {"label" : "commutativeApplicative", "tail" : "(): CommutativeApplicative[[β$7$]TaskParallelNewtype.Par.Type[E, β$7$]]", "member" : "monix.bio.TaskInstancesLevel0.commutativeApplicative", "link" : "monix\/bio\/Task$.html#commutativeApplicative[E]:cats.CommutativeApplicative[[β$7$]monix.bio.Task.Par.Type[E,β$7$]]", "kind" : "implicit def"}, {"label" : "catsParallel", "tail" : "(): Aux[[β$3$]Task[E, β$3$], [β$4$]TaskParallelNewtype.Par.Type[E, β$4$]]", "member" : "monix.bio.TaskInstancesLevel0.catsParallel", "link" : "monix\/bio\/Task$.html#catsParallel[E]:cats.Parallel.Aux[[β$3$]monix.bio.Task[E,β$3$],[β$4$]monix.bio.Task.Par.Type[E,β$4$]]", "kind" : "implicit def"}, {"label" : "catsAsync", "tail" : "(): CatsConcurrentForTask", "member" : "monix.bio.TaskInstancesLevel0.catsAsync", "link" : "monix\/bio\/Task$.html#catsAsync:monix.bio.instances.CatsConcurrentForTask", "kind" : "implicit def"}, {"label" : "catsSemigroup", "tail" : "(A: Semigroup[A]): Semigroup[Task[E, A]]", "member" : "monix.bio.TaskInstancesLevel1.catsSemigroup", "link" : "monix\/bio\/Task$.html#catsSemigroup[E,A](implicitA:cats.Semigroup[A]):cats.Semigroup[monix.bio.Task[E,A]]", "kind" : "implicit def"}, {"label" : "catsEffect", "tail" : "(s: Scheduler, opts: Options): CatsConcurrentEffectForTask", "member" : "monix.bio.TaskInstancesLevel1.catsEffect", "link" : "monix\/bio\/Task$.html#catsEffect(implicits:monix.execution.Scheduler,implicitopts:monix.bio.Task.Options):monix.bio.instances.CatsConcurrentEffectForTask", "kind" : "implicit def"}, {"label" : "monadError", "tail" : "(): CatsBaseForTask[E]", "member" : "monix.bio.TaskInstancesLevel2.monadError", "link" : "monix\/bio\/Task$.html#monadError[E]:monix.bio.instances.CatsBaseForTask[E]", "kind" : "implicit def"}, {"label" : "Par", "tail" : "", "member" : "monix.bio.TaskParallelNewtype.Par", "link" : "monix\/bio\/Task$.html#Par[+E,+A]=TaskParallelNewtype.this.Par.Type[E,A]", "kind" : "type"}, {"label" : "contextShift", "tail" : "(s: Scheduler): ContextShift[[β$16$]Task[E, β$16$]]", "member" : "monix.bio.TaskContextShift.contextShift", "link" : "monix\/bio\/Task$.html#contextShift[E](s:monix.execution.Scheduler):cats.effect.ContextShift[[β$16$]monix.bio.Task[E,β$16$]]", "kind" : "def"}, {"label" : "contextShift", "tail" : "(): ContextShift[[β$12$]Task[E, β$12$]]", "member" : "monix.bio.TaskContextShift.contextShift", "link" : "monix\/bio\/Task$.html#contextShift[E]:cats.effect.ContextShift[[β$12$]monix.bio.Task[E,β$12$]]", "kind" : "implicit def"}, {"label" : "timer", "tail" : "(s: Scheduler): Timer[[β$23$]Task[E, β$23$]]", "member" : "monix.bio.TaskTimers.timer", "link" : "monix\/bio\/Task$.html#timer[E](s:monix.execution.Scheduler):cats.effect.Timer[[β$23$]monix.bio.Task[E,β$23$]]", "kind" : "def"}, {"label" : "timer", "tail" : "(): Timer[[β$18$]Task[E, β$18$]]", "member" : "monix.bio.TaskTimers.timer", "link" : "monix\/bio\/Task$.html#timer[E]:cats.effect.Timer[[β$18$]monix.bio.Task[E,β$18$]]", "kind" : "implicit def"}, {"label" : "clock", "tail" : "(s: Scheduler): Clock[[β$30$]Task[E, β$30$]]", "member" : "monix.bio.TaskClocks.clock", "link" : "monix\/bio\/Task$.html#clock[E](s:monix.execution.Scheduler):cats.effect.Clock[[β$30$]monix.bio.Task[E,β$30$]]", "kind" : "def"}, {"label" : "clock", "tail" : "(): Clock[[β$26$]Task[E, β$26$]]", "member" : "monix.bio.TaskClocks.clock", "link" : "monix\/bio\/Task$.html#clock[E]:cats.effect.Clock[[β$26$]monix.bio.Task[E,β$26$]]", "kind" : "def"}, {"label" : "wanderUnordered", "tail" : "(in: M[A])(f: (A) => Task[E, B]): Task[E, List[B]]", "member" : "monix.bio.internal.TaskDeprecated.Companion.wanderUnordered", "link" : "monix\/bio\/Task$.html#wanderUnordered[E,A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,List[B]]", "kind" : "def"}, {"label" : "wanderN", "tail" : "(parallelism: Int)(in: Iterable[A])(f: (A) => Task[E, B]): Task[E, List[B]]", "member" : "monix.bio.internal.TaskDeprecated.Companion.wanderN", "link" : "monix\/bio\/Task$.html#wanderN[E,A,B](parallelism:Int)(in:Iterable[A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,List[B]]", "kind" : "def"}, {"label" : "wander", "tail" : "(in: Iterable[A])(f: (A) => Task[E, B]): Task[E, List[B]]", "member" : "monix.bio.internal.TaskDeprecated.Companion.wander", "link" : "monix\/bio\/Task$.html#wander[E,A,B](in:Iterable[A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,List[B]]", "kind" : "def"}, {"label" : "gatherUnordered", "tail" : "(in: Iterable[Task[E, A]]): Task[E, List[A]]", "member" : "monix.bio.internal.TaskDeprecated.Companion.gatherUnordered", "link" : "monix\/bio\/Task$.html#gatherUnordered[E,A](in:Iterable[monix.bio.Task[E,A]]):monix.bio.Task[E,List[A]]", "kind" : "def"}, {"label" : "gatherN", "tail" : "(parallelism: Int)(in: Iterable[Task[E, A]]): Task[E, List[A]]", "member" : "monix.bio.internal.TaskDeprecated.Companion.gatherN", "link" : "monix\/bio\/Task$.html#gatherN[E,A](parallelism:Int)(in:Iterable[monix.bio.Task[E,A]]):monix.bio.Task[E,List[A]]", "kind" : "def"}, {"label" : "gather", "tail" : "(in: Iterable[Task[E, A]]): Task[E, List[A]]", "member" : "monix.bio.internal.TaskDeprecated.Companion.gather", "link" : "monix\/bio\/Task$.html#gather[E,A](in:Iterable[monix.bio.Task[E,A]]):monix.bio.Task[E,List[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/Task$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/Task$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/Task$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/Task$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/Task$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/Task$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/Task$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Task$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Task$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/Task$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/Task$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/Task$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/Task$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/Task$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/Task$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/Task$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/Task$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/Task$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/Task$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/Task.html", "kind" : "class"}, {"name" : "monix.bio.TaskApp", "trait" : "monix\/bio\/TaskApp.html", "kind" : "trait", "members_trait" : [{"label" : "main", "tail" : "(args: Array[String]): Unit", "member" : "monix.bio.TaskApp.main", "link" : "monix\/bio\/TaskApp.html#main(args:Array[String]):Unit", "kind" : "final def"}, {"label" : "catsEffect", "tail" : ": ConcurrentEffect[Unsafe]", "member" : "monix.bio.TaskApp.catsEffect", "link" : "monix\/bio\/TaskApp.html#catsEffect:cats.effect.ConcurrentEffect[monix.bio.Task.Unsafe]", "kind" : "implicit lazy val"}, {"label" : "options", "tail" : "(): Options", "member" : "monix.bio.TaskApp.options", "link" : "monix\/bio\/TaskApp.html#options:monix.bio.Task.Options", "kind" : "def"}, {"label" : "scheduler", "tail" : "(): Scheduler", "member" : "monix.bio.TaskApp.scheduler", "link" : "monix\/bio\/TaskApp.html#scheduler:monix.execution.Scheduler", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/TaskApp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/TaskApp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/TaskApp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/TaskApp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/TaskApp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/TaskApp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/TaskApp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskApp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskApp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskApp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/TaskApp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/TaskApp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/TaskApp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/TaskApp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/TaskApp.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/TaskApp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/TaskApp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/TaskApp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/TaskApp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "run", "tail" : "(args: List[String]): UIO[ExitCode]", "member" : "monix.bio.TaskApp.run", "link" : "monix\/bio\/TaskApp.html#run(args:List[String]):monix.bio.UIO[cats.effect.ExitCode]", "kind" : "abstract def"}], "shortDescription" : "Safe App type that executes a Task."}, {"name" : "monix.bio.TaskLift", "object" : "monix\/bio\/TaskLift$.html", "members_object" : [{"label" : "toIO", "tail" : "(eff: ConcurrentEffect[Unsafe]): TaskLift[IO]", "member" : "monix.bio.TaskLift.toIO", "link" : "monix\/bio\/TaskLift$.html#toIO(impliciteff:cats.effect.ConcurrentEffect[monix.bio.Task.Unsafe]):monix.bio.TaskLift[cats.effect.IO]", "kind" : "implicit def"}, {"label" : "toTask", "tail" : ": TaskLift[Unsafe]", "member" : "monix.bio.TaskLift.toTask", "link" : "monix\/bio\/TaskLift$.html#toTask:monix.bio.TaskLift[monix.bio.Task.Unsafe]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(F: TaskLift[F]): TaskLift[F]", "member" : "monix.bio.TaskLift.apply", "link" : "monix\/bio\/TaskLift$.html#apply[F[_]](implicitF:monix.bio.TaskLift[F]):monix.bio.TaskLift[F]", "kind" : "def"}, {"label" : "toConcurrent", "tail" : "(F: Concurrent[F], eff: ConcurrentEffect[Unsafe]): TaskLift[F]", "member" : "monix.bio.TaskLiftImplicits0.toConcurrent", "link" : "monix\/bio\/TaskLift$.html#toConcurrent[F[_]](implicitF:cats.effect.Concurrent[F],impliciteff:cats.effect.ConcurrentEffect[monix.bio.Task.Unsafe]):monix.bio.TaskLift[F]", "kind" : "implicit def"}, {"label" : "toAsync", "tail" : "(F: Async[F], eff: Effect[Unsafe]): TaskLift[F]", "member" : "monix.bio.TaskLiftImplicits1.toAsync", "link" : "monix\/bio\/TaskLift$.html#toAsync[F[_]](implicitF:cats.effect.Async[F],impliciteff:cats.effect.Effect[monix.bio.Task.Unsafe]):monix.bio.TaskLift[F]", "kind" : "implicit def"}, {"label" : "toAnyLiftIO", "tail" : "(F: LiftIO[F], eff: ConcurrentEffect[Unsafe]): TaskLift[F]", "member" : "monix.bio.TaskLiftImplicits2.toAnyLiftIO", "link" : "monix\/bio\/TaskLift$.html#toAnyLiftIO[F[_]](implicitF:cats.effect.LiftIO[F],impliciteff:cats.effect.ConcurrentEffect[monix.bio.Task.Unsafe]):monix.bio.TaskLift[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/TaskLift$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/TaskLift$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/TaskLift$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/TaskLift$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/TaskLift$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/TaskLift$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/TaskLift$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLift$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLift$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLift$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/TaskLift$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/TaskLift$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/TaskLift$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/TaskLift$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/TaskLift$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/TaskLift$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/TaskLift$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/TaskLift$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/TaskLift$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/bio\/TaskLift.html", "kind" : "trait", "members_trait" : [{"label" : "and", "tail" : "(h: FunctionK[Unsafe, H]): FunctionK[Unsafe, [γ$4$]Tuple2K[F, H, γ$4$]]", "member" : "cats.arrow.FunctionK.and", "link" : "monix\/bio\/TaskLift.html#and[H[_<:<?>]](h:cats.arrow.FunctionK[F,H]):cats.arrow.FunctionK[F,[γ$4$]cats.data.Tuple2K[G,H,γ$4$]]", "kind" : "def"}, {"label" : "or", "tail" : "(h: FunctionK[H, F]): FunctionK[[γ$1$]EitherK[Unsafe, H, γ$1$], F]", "member" : "cats.arrow.FunctionK.or", "link" : "monix\/bio\/TaskLift.html#or[H[_<:<?>]](h:cats.arrow.FunctionK[H,G]):cats.arrow.FunctionK[[γ$1$]cats.data.EitherK[F,H,γ$1$],G]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: FunctionK[F, H]): FunctionK[Unsafe, H]", "member" : "cats.arrow.FunctionK.andThen", "link" : "monix\/bio\/TaskLift.html#andThen[H[_<:<?>]](f:cats.arrow.FunctionK[G,H]):cats.arrow.FunctionK[F,H]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: FunctionK[E, Unsafe]): FunctionK[E, F]", "member" : "cats.arrow.FunctionK.compose", "link" : "monix\/bio\/TaskLift.html#compose[E[_<:<?>]](f:cats.arrow.FunctionK[E,F]):cats.arrow.FunctionK[E,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/TaskLift.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/TaskLift.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/TaskLift.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/TaskLift.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/TaskLift.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/TaskLift.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/TaskLift.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLift.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLift.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLift.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/TaskLift.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/TaskLift.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/TaskLift.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/TaskLift.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/TaskLift.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/TaskLift.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/TaskLift.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/TaskLift.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/TaskLift.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(task: Unsafe[A]): F[A]", "member" : "monix.bio.TaskLift.apply", "link" : "monix\/bio\/TaskLift.html#apply[A](task:monix.bio.Task.Unsafe[A]):F[A]", "kind" : "abstract def"}], "shortDescription" : "A lawless type class that specifies conversions from Taskto similar data types (i.e."}, {"name" : "monix.bio.TaskLike", "object" : "monix\/bio\/TaskLike$.html", "members_object" : [{"label" : "fromEither", "tail" : "(): TaskLike[[β$0$]Either[E, β$0$]]", "member" : "monix.bio.TaskLike.fromEither", "link" : "monix\/bio\/TaskLike$.html#fromEither[E<:Throwable]:monix.bio.TaskLike[[β$0$]scala.util.Either[E,β$0$]]", "kind" : "implicit def"}, {"label" : "fromFunction0", "tail" : ": TaskLike[Function0]", "member" : "monix.bio.TaskLike.fromFunction0", "link" : "monix\/bio\/TaskLike$.html#fromFunction0:monix.bio.TaskLike[Function0]", "kind" : "implicit val"}, {"label" : "fromCancelablePromise", "tail" : ": TaskLike[CancelablePromise]", "member" : "monix.bio.TaskLike.fromCancelablePromise", "link" : "monix\/bio\/TaskLike$.html#fromCancelablePromise:monix.bio.TaskLike[monix.execution.CancelablePromise]", "kind" : "implicit val"}, {"label" : "fromTry", "tail" : ": TaskLike[Try]", "member" : "monix.bio.TaskLike.fromTry", "link" : "monix\/bio\/TaskLike$.html#fromTry:monix.bio.TaskLike[scala.util.Try]", "kind" : "implicit val"}, {"label" : "fromSyncIO", "tail" : ": TaskLike[SyncIO]", "member" : "monix.bio.TaskLike.fromSyncIO", "link" : "monix\/bio\/TaskLike$.html#fromSyncIO:monix.bio.TaskLike[cats.effect.SyncIO]", "kind" : "implicit val"}, {"label" : "fromIO", "tail" : ": TaskLike[IO]", "member" : "monix.bio.TaskLike.fromIO", "link" : "monix\/bio\/TaskLike$.html#fromIO:monix.bio.TaskLike[cats.effect.IO]", "kind" : "implicit val"}, {"label" : "fromEval", "tail" : ": TaskLike[Eval]", "member" : "monix.bio.TaskLike.fromEval", "link" : "monix\/bio\/TaskLike$.html#fromEval:monix.bio.TaskLike[cats.Eval]", "kind" : "implicit val"}, {"label" : "fromFuture", "tail" : ": TaskLike[Future]", "member" : "monix.bio.TaskLike.fromFuture", "link" : "monix\/bio\/TaskLike$.html#fromFuture:monix.bio.TaskLike[scala.concurrent.Future]", "kind" : "implicit val"}, {"label" : "fromTask", "tail" : ": TaskLike[Unsafe]", "member" : "monix.bio.TaskLike.fromTask", "link" : "monix\/bio\/TaskLike$.html#fromTask:monix.bio.TaskLike[monix.bio.Task.Unsafe]", "kind" : "implicit val"}, {"label" : "apply", "tail" : "(F: TaskLike[F]): TaskLike[F]", "member" : "monix.bio.TaskLike.apply", "link" : "monix\/bio\/TaskLike$.html#apply[F[_]](implicitF:monix.bio.TaskLike[F]):monix.bio.TaskLike[F]", "kind" : "def"}, {"label" : "fromConcurrentEffect", "tail" : "(F: ConcurrentEffect[F]): TaskLike[F]", "member" : "monix.bio.TaskLikeImplicits0.fromConcurrentEffect", "link" : "monix\/bio\/TaskLike$.html#fromConcurrentEffect[F[_]](implicitF:cats.effect.ConcurrentEffect[F]):monix.bio.TaskLike[F]", "kind" : "implicit def"}, {"label" : "fromEffect", "tail" : "(F: Effect[F]): TaskLike[F]", "member" : "monix.bio.TaskLikeImplicits1.fromEffect", "link" : "monix\/bio\/TaskLike$.html#fromEffect[F[_]](implicitF:cats.effect.Effect[F]):monix.bio.TaskLike[F]", "kind" : "implicit def"}, {"label" : "fromFutureLift", "tail" : "(F: FutureLift[Unsafe, F]): TaskLike[F]", "member" : "monix.bio.TaskLikeImplicits2.fromFutureLift", "link" : "monix\/bio\/TaskLike$.html#fromFutureLift[F[_]](implicitF:monix.catnap.FutureLift[monix.bio.Task.Unsafe,F]):monix.bio.TaskLike[F]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/TaskLike$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/TaskLike$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/TaskLike$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/TaskLike$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/TaskLike$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/TaskLike$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/TaskLike$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLike$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLike$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLike$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/TaskLike$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/TaskLike$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/TaskLike$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/TaskLike$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/TaskLike$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/TaskLike$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/TaskLike$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/TaskLike$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/TaskLike$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "monix\/bio\/TaskLike.html", "kind" : "trait", "members_trait" : [{"label" : "and", "tail" : "(h: FunctionK[F, H]): FunctionK[F, [γ$4$]Tuple2K[Unsafe, H, γ$4$]]", "member" : "cats.arrow.FunctionK.and", "link" : "monix\/bio\/TaskLike.html#and[H[_<:<?>]](h:cats.arrow.FunctionK[F,H]):cats.arrow.FunctionK[F,[γ$4$]cats.data.Tuple2K[G,H,γ$4$]]", "kind" : "def"}, {"label" : "or", "tail" : "(h: FunctionK[H, Unsafe]): FunctionK[[γ$1$]EitherK[F, H, γ$1$], Unsafe]", "member" : "cats.arrow.FunctionK.or", "link" : "monix\/bio\/TaskLike.html#or[H[_<:<?>]](h:cats.arrow.FunctionK[H,G]):cats.arrow.FunctionK[[γ$1$]cats.data.EitherK[F,H,γ$1$],G]", "kind" : "def"}, {"label" : "andThen", "tail" : "(f: FunctionK[Unsafe, H]): FunctionK[F, H]", "member" : "cats.arrow.FunctionK.andThen", "link" : "monix\/bio\/TaskLike.html#andThen[H[_<:<?>]](f:cats.arrow.FunctionK[G,H]):cats.arrow.FunctionK[F,H]", "kind" : "def"}, {"label" : "compose", "tail" : "(f: FunctionK[E, F]): FunctionK[E, Unsafe]", "member" : "cats.arrow.FunctionK.compose", "link" : "monix\/bio\/TaskLike.html#compose[E[_<:<?>]](f:cats.arrow.FunctionK[E,F]):cats.arrow.FunctionK[E,G]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/TaskLike.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/TaskLike.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/TaskLike.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/TaskLike.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/TaskLike.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/TaskLike.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/TaskLike.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLike.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLike.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLike.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/TaskLike.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/TaskLike.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/TaskLike.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/TaskLike.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/TaskLike.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/TaskLike.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/TaskLike.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/TaskLike.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/TaskLike.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "apply", "tail" : "(fa: F[A]): Unsafe[A]", "member" : "monix.bio.TaskLike.apply", "link" : "monix\/bio\/TaskLike.html#apply[A](fa:F[A]):monix.bio.Task.Unsafe[A]", "kind" : "abstract def"}], "shortDescription" : "A lawless type class that provides conversions into a Task.Unsafe."}, {"name" : "monix.bio.TaskLocal", "shortDescription" : "A TaskLocal is like aThreadLocalthat is pure and with a flexible scope, being processed in thecontext of the Task.Unsafe data type.", "object" : "monix\/bio\/TaskLocal$.html", "members_class" : [{"label" : "bindClear", "tail" : "(task: Task[E, R]): Task[E, R]", "member" : "monix.bio.TaskLocal.bindClear", "link" : "monix\/bio\/TaskLocal.html#bindClear[E,R](task:monix.bio.Task[E,R]):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "bindL", "tail" : "(value: Task[E, A])(task: Task[E, R]): Task[E, R]", "member" : "monix.bio.TaskLocal.bindL", "link" : "monix\/bio\/TaskLocal.html#bindL[E,R](value:monix.bio.Task[E,A])(task:monix.bio.Task[E,R]):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "bind", "tail" : "(value: A)(task: Task[E, R]): Task[E, R]", "member" : "monix.bio.TaskLocal.bind", "link" : "monix\/bio\/TaskLocal.html#bind[E,R](value:A)(task:monix.bio.Task[E,R]):monix.bio.Task[E,R]", "kind" : "def"}, {"label" : "clear", "tail" : "(): UIO[Unit]", "member" : "monix.bio.TaskLocal.clear", "link" : "monix\/bio\/TaskLocal.html#clear:monix.bio.UIO[Unit]", "kind" : "def"}, {"label" : "write", "tail" : "(value: A): UIO[Unit]", "member" : "monix.bio.TaskLocal.write", "link" : "monix\/bio\/TaskLocal.html#write(value:A):monix.bio.UIO[Unit]", "kind" : "def"}, {"label" : "read", "tail" : "(): UIO[A]", "member" : "monix.bio.TaskLocal.read", "link" : "monix\/bio\/TaskLocal.html#read:monix.bio.UIO[A]", "kind" : "def"}, {"label" : "local", "tail" : "(): UIO[Local[A]]", "member" : "monix.bio.TaskLocal.local", "link" : "monix\/bio\/TaskLocal.html#local:monix.bio.UIO[monix.execution.misc.Local[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/TaskLocal.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/TaskLocal.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/TaskLocal.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/TaskLocal.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/TaskLocal.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/TaskLocal.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/TaskLocal.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLocal.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLocal.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLocal.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/TaskLocal.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/TaskLocal.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/TaskLocal.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/TaskLocal.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/TaskLocal.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/TaskLocal.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/TaskLocal.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/TaskLocal.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/TaskLocal.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "isolate", "tail" : "(task: Task[E, A]): Task[E, A]", "member" : "monix.bio.TaskLocal.isolate", "link" : "monix\/bio\/TaskLocal$.html#isolate[E,A](task:monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "wrap", "tail" : "(local: Task[E, Local[A]]): Task[E, TaskLocal[A]]", "member" : "monix.bio.TaskLocal.wrap", "link" : "monix\/bio\/TaskLocal$.html#wrap[E,A](local:monix.bio.Task[E,monix.execution.misc.Local[A]]):monix.bio.Task[E,monix.bio.TaskLocal[A]]", "kind" : "def"}, {"label" : "apply", "tail" : "(default: A): UIO[TaskLocal[A]]", "member" : "monix.bio.TaskLocal.apply", "link" : "monix\/bio\/TaskLocal$.html#apply[A](default:A):monix.bio.UIO[monix.bio.TaskLocal[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/TaskLocal$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/TaskLocal$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/TaskLocal$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/TaskLocal$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/TaskLocal$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/TaskLocal$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/TaskLocal$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLocal$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLocal$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/TaskLocal$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/TaskLocal$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/TaskLocal$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/TaskLocal$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/TaskLocal$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/TaskLocal$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/TaskLocal$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/TaskLocal$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/TaskLocal$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/TaskLocal$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/TaskLocal.html", "kind" : "class"}, {"name" : "monix.bio.UIO", "shortDescription" : "", "object" : "monix\/bio\/UIO$.html", "members_object" : [{"label" : "parZip6", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3], fa4: UIO[A4], fa5: UIO[A5], fa6: UIO[A6]): UIO[(A1, A2, A3, A4, A5, A6)]", "member" : "monix.bio.UIO.parZip6", "link" : "monix\/bio\/UIO$.html#parZip6[A1,A2,A3,A4,A5,A6](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3],fa4:monix.bio.UIO[A4],fa5:monix.bio.UIO[A5],fa6:monix.bio.UIO[A6]):monix.bio.UIO[(A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "parZip5", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3], fa4: UIO[A4], fa5: UIO[A5]): UIO[(A1, A2, A3, A4, A5)]", "member" : "monix.bio.UIO.parZip5", "link" : "monix\/bio\/UIO$.html#parZip5[A1,A2,A3,A4,A5](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3],fa4:monix.bio.UIO[A4],fa5:monix.bio.UIO[A5]):monix.bio.UIO[(A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "parZip4", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3], fa4: UIO[A4]): UIO[(A1, A2, A3, A4)]", "member" : "monix.bio.UIO.parZip4", "link" : "monix\/bio\/UIO$.html#parZip4[A1,A2,A3,A4](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3],fa4:monix.bio.UIO[A4]):monix.bio.UIO[(A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "parZip3", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3]): UIO[(A1, A2, A3)]", "member" : "monix.bio.UIO.parZip3", "link" : "monix\/bio\/UIO$.html#parZip3[A1,A2,A3](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3]):monix.bio.UIO[(A1,A2,A3)]", "kind" : "def"}, {"label" : "parZip2", "tail" : "(fa1: UIO[A1], fa2: UIO[A2]): UIO[(A1, A2)]", "member" : "monix.bio.UIO.parZip2", "link" : "monix\/bio\/UIO$.html#parZip2[A1,A2,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2]):monix.bio.UIO[(A1,A2)]", "kind" : "def"}, {"label" : "parMap6", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3], fa4: UIO[A4], fa5: UIO[A5], fa6: UIO[A6])(f: (A1, A2, A3, A4, A5, A6) => R): UIO[R]", "member" : "monix.bio.UIO.parMap6", "link" : "monix\/bio\/UIO$.html#parMap6[A1,A2,A3,A4,A5,A6,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3],fa4:monix.bio.UIO[A4],fa5:monix.bio.UIO[A5],fa6:monix.bio.UIO[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "parMap5", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3], fa4: UIO[A4], fa5: UIO[A5])(f: (A1, A2, A3, A4, A5) => R): UIO[R]", "member" : "monix.bio.UIO.parMap5", "link" : "monix\/bio\/UIO$.html#parMap5[A1,A2,A3,A4,A5,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3],fa4:monix.bio.UIO[A4],fa5:monix.bio.UIO[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "parMap4", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3], fa4: UIO[A4])(f: (A1, A2, A3, A4) => R): UIO[R]", "member" : "monix.bio.UIO.parMap4", "link" : "monix\/bio\/UIO$.html#parMap4[A1,A2,A3,A4,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3],fa4:monix.bio.UIO[A4])(f:(A1,A2,A3,A4)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "parMap3", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3])(f: (A1, A2, A3) => R): UIO[R]", "member" : "monix.bio.UIO.parMap3", "link" : "monix\/bio\/UIO$.html#parMap3[A1,A2,A3,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3])(f:(A1,A2,A3)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "parMap2", "tail" : "(fa1: UIO[A1], fa2: UIO[A2])(f: (A1, A2) => R): UIO[R]", "member" : "monix.bio.UIO.parMap2", "link" : "monix\/bio\/UIO$.html#parMap2[A1,A2,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2])(f:(A1,A2)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "map6", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3], fa4: UIO[A4], fa5: UIO[A5], fa6: UIO[A6])(f: (A1, A2, A3, A4, A5, A6) => R): UIO[R]", "member" : "monix.bio.UIO.map6", "link" : "monix\/bio\/UIO$.html#map6[A1,A2,A3,A4,A5,A6,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3],fa4:monix.bio.UIO[A4],fa5:monix.bio.UIO[A5],fa6:monix.bio.UIO[A6])(f:(A1,A2,A3,A4,A5,A6)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "map5", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3], fa4: UIO[A4], fa5: UIO[A5])(f: (A1, A2, A3, A4, A5) => R): UIO[R]", "member" : "monix.bio.UIO.map5", "link" : "monix\/bio\/UIO$.html#map5[A1,A2,A3,A4,A5,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3],fa4:monix.bio.UIO[A4],fa5:monix.bio.UIO[A5])(f:(A1,A2,A3,A4,A5)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "map4", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3], fa4: UIO[A4])(f: (A1, A2, A3, A4) => R): UIO[R]", "member" : "monix.bio.UIO.map4", "link" : "monix\/bio\/UIO$.html#map4[A1,A2,A3,A4,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3],fa4:monix.bio.UIO[A4])(f:(A1,A2,A3,A4)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "map3", "tail" : "(fa1: UIO[A1], fa2: UIO[A2], fa3: UIO[A3])(f: (A1, A2, A3) => R): UIO[R]", "member" : "monix.bio.UIO.map3", "link" : "monix\/bio\/UIO$.html#map3[A1,A2,A3,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2],fa3:monix.bio.UIO[A3])(f:(A1,A2,A3)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa1: UIO[A1], fa2: UIO[A2])(f: (A1, A2) => R): UIO[R]", "member" : "monix.bio.UIO.map2", "link" : "monix\/bio\/UIO$.html#map2[A1,A2,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2])(f:(A1,A2)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "mapBoth", "tail" : "(fa1: UIO[A1], fa2: UIO[A2])(f: (A1, A2) => R): UIO[R]", "member" : "monix.bio.UIO.mapBoth", "link" : "monix\/bio\/UIO$.html#mapBoth[A1,A2,R](fa1:monix.bio.UIO[A1],fa2:monix.bio.UIO[A2])(f:(A1,A2)=>R):monix.bio.UIO[R]", "kind" : "def"}, {"label" : "parTraverseUnordered", "tail" : "(in: Iterable[A])(f: (A) => UIO[B]): UIO[List[B]]", "member" : "monix.bio.UIO.parTraverseUnordered", "link" : "monix\/bio\/UIO$.html#parTraverseUnordered[A,B](in:Iterable[A])(f:A=>monix.bio.UIO[B]):monix.bio.UIO[List[B]]", "kind" : "def"}, {"label" : "parSequenceUnordered", "tail" : "(in: Iterable[UIO[A]]): UIO[List[A]]", "member" : "monix.bio.UIO.parSequenceUnordered", "link" : "monix\/bio\/UIO$.html#parSequenceUnordered[A](in:Iterable[monix.bio.UIO[A]]):monix.bio.UIO[List[A]]", "kind" : "def"}, {"label" : "parTraverseN", "tail" : "(parallelism: Int)(in: Iterable[A])(f: (A) => UIO[B]): UIO[List[B]]", "member" : "monix.bio.UIO.parTraverseN", "link" : "monix\/bio\/UIO$.html#parTraverseN[A,B](parallelism:Int)(in:Iterable[A])(f:A=>monix.bio.UIO[B]):monix.bio.UIO[List[B]]", "kind" : "def"}, {"label" : "parSequenceN", "tail" : "(parallelism: Int)(in: Iterable[UIO[A]]): UIO[List[A]]", "member" : "monix.bio.UIO.parSequenceN", "link" : "monix\/bio\/UIO$.html#parSequenceN[A](parallelism:Int)(in:Iterable[monix.bio.UIO[A]]):monix.bio.UIO[List[A]]", "kind" : "def"}, {"label" : "parTraverse", "tail" : "(in: Iterable[A])(f: (A) => UIO[B]): UIO[List[B]]", "member" : "monix.bio.UIO.parTraverse", "link" : "monix\/bio\/UIO$.html#parTraverse[A,B](in:Iterable[A])(f:A=>monix.bio.UIO[B]):monix.bio.UIO[List[B]]", "kind" : "def"}, {"label" : "parSequence", "tail" : "(in: Iterable[UIO[A]]): UIO[List[A]]", "member" : "monix.bio.UIO.parSequence", "link" : "monix\/bio\/UIO$.html#parSequence[A](in:Iterable[monix.bio.UIO[A]]):monix.bio.UIO[List[A]]", "kind" : "def"}, {"label" : "traverse", "tail" : "(in: Iterable[A])(f: (A) => UIO[B]): UIO[List[B]]", "member" : "monix.bio.UIO.traverse", "link" : "monix\/bio\/UIO$.html#traverse[A,B](in:Iterable[A])(f:A=>monix.bio.UIO[B]):monix.bio.UIO[List[B]]", "kind" : "def"}, {"label" : "sequence", "tail" : "(in: Iterable[UIO[A]]): UIO[List[A]]", "member" : "monix.bio.UIO.sequence", "link" : "monix\/bio\/UIO$.html#sequence[A](in:Iterable[monix.bio.UIO[A]]):monix.bio.UIO[List[A]]", "kind" : "def"}, {"label" : "sleep", "tail" : "(timespan: FiniteDuration): UIO[Unit]", "member" : "monix.bio.UIO.sleep", "link" : "monix\/bio\/UIO$.html#sleep(timespan:scala.concurrent.duration.FiniteDuration):monix.bio.UIO[Unit]", "kind" : "def"}, {"label" : "shift", "tail" : "(ec: ExecutionContext): UIO[Unit]", "member" : "monix.bio.UIO.shift", "link" : "monix\/bio\/UIO$.html#shift(ec:scala.concurrent.ExecutionContext):monix.bio.UIO[Unit]", "kind" : "def"}, {"label" : "shift", "tail" : ": UIO[Unit]", "member" : "monix.bio.UIO.shift", "link" : "monix\/bio\/UIO$.html#shift:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "rethrow", "tail" : "(fa: UIO[Either[Nothing, A]]): UIO[A]", "member" : "monix.bio.UIO.rethrow", "link" : "monix\/bio\/UIO$.html#rethrow[A](fa:monix.bio.UIO[Either[Nothing,A]]):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: UIO[A], fb: UIO[B]): UIO[Either[(A, Fiber[Nothing, B]), (Fiber[Nothing, A], B)]]", "member" : "monix.bio.UIO.racePair", "link" : "monix\/bio\/UIO$.html#racePair[A,B](fa:monix.bio.UIO[A],fb:monix.bio.UIO[B]):monix.bio.UIO[Either[(A,monix.bio.Fiber[Nothing,B]),(monix.bio.Fiber[Nothing,A],B)]]", "kind" : "def"}, {"label" : "raceMany", "tail" : "(tasks: Iterable[UIO[A]]): UIO[A]", "member" : "monix.bio.UIO.raceMany", "link" : "monix\/bio\/UIO$.html#raceMany[A](tasks:Iterable[monix.bio.UIO[A]]):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "race", "tail" : "(fa: UIO[A], fb: UIO[B]): UIO[Either[A, B]]", "member" : "monix.bio.UIO.race", "link" : "monix\/bio\/UIO$.html#race[A,B](fa:monix.bio.UIO[A],fb:monix.bio.UIO[B]):monix.bio.UIO[Either[A,B]]", "kind" : "def"}, {"label" : "fromCancelablePromiseEither", "tail" : "(p: CancelablePromise[Either[Nothing, A]]): UIO[A]", "member" : "monix.bio.UIO.fromCancelablePromiseEither", "link" : "monix\/bio\/UIO$.html#fromCancelablePromiseEither[A](p:monix.execution.CancelablePromise[Either[Nothing,A]]):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "cancelBoundary", "tail" : ": UIO[Unit]", "member" : "monix.bio.UIO.cancelBoundary", "link" : "monix\/bio\/UIO$.html#cancelBoundary:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "monix.bio.UIO.unit", "link" : "monix\/bio\/UIO$.html#unit:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => UIO[Either[A, B]]): UIO[B]", "member" : "monix.bio.UIO.tailRecM", "link" : "monix\/bio\/UIO$.html#tailRecM[A,B](a:A)(f:A=>monix.bio.UIO[Either[A,B]]):monix.bio.UIO[B]", "kind" : "def"}, {"label" : "never", "tail" : ": UIO[Nothing]", "member" : "monix.bio.UIO.never", "link" : "monix\/bio\/UIO$.html#never:monix.bio.UIO[Nothing]", "kind" : "val"}, {"label" : "delay", "tail" : "(a: => A): UIO[A]", "member" : "monix.bio.UIO.delay", "link" : "monix\/bio\/UIO$.html#delay[A](a:=>A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "evalAsync", "tail" : "(a: => A): UIO[A]", "member" : "monix.bio.UIO.evalAsync", "link" : "monix\/bio\/UIO$.html#evalAsync[A](a:=>A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "evalTotal", "tail" : "(a: => A): UIO[A]", "member" : "monix.bio.UIO.evalTotal", "link" : "monix\/bio\/UIO$.html#evalTotal[A](a:=>A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "eval", "tail" : "(a: => A): UIO[A]", "member" : "monix.bio.UIO.eval", "link" : "monix\/bio\/UIO$.html#eval[A](a:=>A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "suspendTotal", "tail" : "(fa: => UIO[A]): UIO[A]", "member" : "monix.bio.UIO.suspendTotal", "link" : "monix\/bio\/UIO$.html#suspendTotal[A](fa:=>monix.bio.UIO[A]):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => UIO[A]): UIO[A]", "member" : "monix.bio.UIO.suspend", "link" : "monix\/bio\/UIO$.html#suspend[A](fa:=>monix.bio.UIO[A]):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "deferAction", "tail" : "(f: (Scheduler) => UIO[A]): UIO[A]", "member" : "monix.bio.UIO.deferAction", "link" : "monix\/bio\/UIO$.html#deferAction[A](f:monix.execution.Scheduler=>monix.bio.UIO[A]):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "deferTotal", "tail" : "(fa: => UIO[A]): UIO[A]", "member" : "monix.bio.UIO.deferTotal", "link" : "monix\/bio\/UIO$.html#deferTotal[A](fa:=>monix.bio.UIO[A]):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => UIO[A]): UIO[A]", "member" : "monix.bio.UIO.defer", "link" : "monix\/bio\/UIO$.html#defer[A](fa:=>monix.bio.UIO[A]):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "terminate", "tail" : "(ex: Throwable): UIO[Nothing]", "member" : "monix.bio.UIO.terminate", "link" : "monix\/bio\/UIO$.html#terminate(ex:Throwable):monix.bio.UIO[Nothing]", "kind" : "def"}, {"label" : "pure", "tail" : "(a: A): UIO[A]", "member" : "monix.bio.UIO.pure", "link" : "monix\/bio\/UIO$.html#pure[A](a:A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "now", "tail" : "(a: A): UIO[A]", "member" : "monix.bio.UIO.now", "link" : "monix\/bio\/UIO$.html#now[A](a:A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "apply", "tail" : "(a: => A): UIO[A]", "member" : "monix.bio.UIO.apply", "link" : "monix\/bio\/UIO$.html#apply[A](a:=>A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "wanderUnordered", "tail" : "(in: M[A])(f: (A) => UIO[B]): UIO[List[B]]", "member" : "monix.bio.internal.UIODeprecated.Companion.wanderUnordered", "link" : "monix\/bio\/UIO$.html#wanderUnordered[A,B,M[X]<:Iterable[X]](in:M[A])(f:A=>monix.bio.UIO[B]):monix.bio.UIO[List[B]]", "kind" : "def"}, {"label" : "wanderN", "tail" : "(parallelism: Int)(in: Iterable[A])(f: (A) => UIO[B]): UIO[List[B]]", "member" : "monix.bio.internal.UIODeprecated.Companion.wanderN", "link" : "monix\/bio\/UIO$.html#wanderN[A,B](parallelism:Int)(in:Iterable[A])(f:A=>monix.bio.UIO[B]):monix.bio.UIO[List[B]]", "kind" : "def"}, {"label" : "wander", "tail" : "(in: Iterable[A])(f: (A) => UIO[B]): UIO[List[B]]", "member" : "monix.bio.internal.UIODeprecated.Companion.wander", "link" : "monix\/bio\/UIO$.html#wander[A,B](in:Iterable[A])(f:A=>monix.bio.UIO[B]):monix.bio.UIO[List[B]]", "kind" : "def"}, {"label" : "gatherUnordered", "tail" : "(in: Iterable[UIO[A]]): UIO[List[A]]", "member" : "monix.bio.internal.UIODeprecated.Companion.gatherUnordered", "link" : "monix\/bio\/UIO$.html#gatherUnordered[A](in:Iterable[monix.bio.UIO[A]]):monix.bio.UIO[List[A]]", "kind" : "def"}, {"label" : "gatherN", "tail" : "(parallelism: Int)(in: Iterable[UIO[A]]): UIO[List[A]]", "member" : "monix.bio.internal.UIODeprecated.Companion.gatherN", "link" : "monix\/bio\/UIO$.html#gatherN[A](parallelism:Int)(in:Iterable[monix.bio.UIO[A]]):monix.bio.UIO[List[A]]", "kind" : "def"}, {"label" : "gather", "tail" : "(in: Iterable[UIO[A]]): UIO[List[A]]", "member" : "monix.bio.internal.UIODeprecated.Companion.gather", "link" : "monix\/bio\/UIO$.html#gather[A](in:Iterable[monix.bio.UIO[A]]):monix.bio.UIO[List[A]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/UIO$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/UIO$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/UIO$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/UIO$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/UIO$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/UIO$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/UIO$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/UIO$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/UIO$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/UIO$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/UIO$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/UIO$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/UIO$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/UIO$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/UIO$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/UIO$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/UIO$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/UIO$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/UIO$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "monix.bio.instances" : [{"name" : "monix.bio.instances.CatsAsyncForTask", "shortDescription" : "Cats type class instance of Taskfor  cats.effect.Async and CoflatMap (and implicitly forApplicative, Monad, MonadError, etc).", "members_class" : [{"label" : "guaranteeCase", "tail" : "(acquire: Unsafe[A])(finalizer: (ExitCase[Throwable]) => Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.guaranteeCase", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#guaranteeCase[A](acquire:monix.bio.Task.Unsafe[A])(finalizer:cats.effect.ExitCase[Throwable]=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(acquire: Unsafe[A])(finalizer: Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.guarantee", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#guarantee[A](acquire:monix.bio.Task.Unsafe[A])(finalizer:monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.asyncF", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#asyncF[A](k:(Either[Throwable,A]=>Unit)=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: Unsafe[A])(use: (A) => Unsafe[B])(release: (A, ExitCase[Throwable]) => Unsafe[Unit]): Unsafe[B]", "member" : "monix.bio.instances.CatsAsyncForTask.bracketCase", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#bracketCase[A,B](acquire:monix.bio.Task.Unsafe[A])(use:A=>monix.bio.Task.Unsafe[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Unsafe[A])(use: (A) => Unsafe[B])(release: (A) => Unsafe[Unit]): Unsafe[B]", "member" : "monix.bio.instances.CatsAsyncForTask.bracket", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#bracket[A,B](acquire:monix.bio.Task.Unsafe[A])(use:A=>monix.bio.Task.Unsafe[B])(release:A=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[B]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.async", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.suspend", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#suspend[A](fa:=>monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.delay", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#delay[A](thunk:=>A):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"member" : "monix.bio.instances.CatsAsyncForTask#<init>", "error" : "unsupported entity"}, {"label" : "never", "tail" : "(): Unsafe[A]", "member" : "cats.effect.Async.never", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#never[A]:F[A]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Unsafe[A]", "member" : "cats.effect.Async.liftIO", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Unsafe[A]) => Unsafe[A]): Unsafe[A]", "member" : "cats.Defer.fix", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Unsafe[A])(finalizer: Unsafe[Unit]): Unsafe[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Unsafe[A]): Unsafe[A]", "member" : "cats.effect.Bracket.uncancelable", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#uncancelable[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "bimap", "tail" : "(fab: Task[A, B])(f: (A) => C, g: (B) => D): Task[C, D]", "member" : "monix.bio.instances.CatsBaseForTask.bimap", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#bimap[A,B,C,D](fab:monix.bio.Task[A,B])(f:A=>C,g:B=>D):monix.bio.Task[C,D]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[Throwable, A], tb: Task[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.combineK", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#combineK[A](ta:monix.bio.Task[E,A],tb:monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Task[Throwable, A]]", "member" : "monix.bio.instances.CatsBaseForTask.coflatten", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#coflatten[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,monix.bio.Task[E,A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[Throwable, A])(f: (Task[Throwable, A]) => B): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.coflatMap", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#coflatMap[A,B](fa:monix.bio.Task[E,A])(f:monix.bio.Task[E,A]=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.fromTry", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Either[Throwable, A]]", "member" : "monix.bio.instances.CatsBaseForTask.attempt", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#attempt[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,Either[E,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Task[Throwable, A]]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.recoverWith", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#recoverWith[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.recover", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#recover[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[Throwable, A])(f: (Throwable) => Task[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#handleErrorWith[A](fa:monix.bio.Task[E,A])(f:E=>monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[Throwable, A])(f: (Throwable) => A): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleError", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#handleError[A](fa:monix.bio.Task[E,A])(f:E=>A):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.raiseError", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#raiseError[A](e:E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.map", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map[A,B](fa:monix.bio.Task[E,A])(f:A=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "monix.bio.instances.CatsBaseForTask.product", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#product[A,B](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B]):monix.bio.Task[E,(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B])(f: (A, B) => Z): Task[Throwable, Z]", "member" : "monix.bio.instances.CatsBaseForTask.map2", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map2[A,B,Z](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B])(f:(A,B)=>Z):monix.bio.Task[E,Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[Throwable, (A) => B])(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.ap", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap[A,B](ff:monix.bio.Task[E,A=>B])(fa:monix.bio.Task[E,A]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Throwable, Either[A, B]]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.tailRecM", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tailRecM[A,B](a:A)(f:A=>monix.bio.Task[E,Either[A,B]]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Throwable, Task[Throwable, A]]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.flatten", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#flatten[A](ffa:monix.bio.Task[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.flatMap", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#flatMap[A,B](fa:monix.bio.Task[E,A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "monix.bio.instances.CatsBaseForTask.unit", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#unit:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): UIO[A]", "member" : "monix.bio.instances.CatsBaseForTask.pure", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#pure[A](a:A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "leftWiden", "tail" : "(fab: Task[A, B]): Task[AA, B]", "member" : "cats.Bifunctor.leftWiden", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#leftWiden[A,B,AA>:A](fab:F[A,B]):F[AA,B]", "kind" : "def"}, {"label" : "compose", "tail" : "(G0: Bifunctor[G]): Bifunctor[[α, β]Task[G[α, β], G[α, β]]]", "member" : "cats.Bifunctor.compose", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#compose[G[_,_]](implicitG0:cats.Bifunctor[G]):cats.Bifunctor[[α,β]F[G[α,β],G[α,β]]]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(fab: Task[A, B])(f: (A) => C): Task[C, B]", "member" : "cats.Bifunctor.leftMap", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#leftMap[A,B,C](fab:F[A,B])(f:A=>C):F[C,B]", "kind" : "def"}, {"label" : "leftFunctor", "tail" : "(): Functor[[α$1$]Task[α$1$, X]]", "member" : "cats.Bifunctor.leftFunctor", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#leftFunctor[X]:cats.Functor[[α$1$]F[α$1$,X]]", "kind" : "def"}, {"label" : "rightFunctor", "tail" : "(): Functor[[β$0$]Task[X, β$0$]]", "member" : "cats.Bifunctor.rightFunctor", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#rightFunctor[X]:cats.Functor[[β$0$]F[X,β$0$]]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B])(F: Functor[[β$2$]Task[Throwable, β$2$]]): Task[Throwable, Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[Throwable, G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[Throwable, A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Throwable]): Task[Throwable, A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[Throwable, A])(recover: (Throwable) => Task[Throwable, B], bind: (A) => Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Throwable, Either[EE, A]]): Task[Throwable, A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[Throwable, A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[Throwable, A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[Throwable, A])(error: => Throwable)(predicate: (A) => Boolean): Task[Throwable, A]", "member" : "cats.MonadError.ensure", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[Throwable, A])(cond: => Task[Throwable, Boolean]): Task[Throwable, Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[Throwable, A])(cond: => Task[Throwable, Boolean])(G: Alternative[G]): Task[Throwable, G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Throwable, Boolean])(body: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Throwable, Boolean])(body: => Task[Throwable, A])(G: Alternative[G]): Task[Throwable, G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Throwable, Option[A]]): Task[Throwable, A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Throwable, Boolean])(ifTrue: => Task[Throwable, B], ifFalse: => Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.FlatMap.productL", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.FlatMap.productR", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[Throwable, (A, B) => Z])(fa: Task[Throwable, A], fb: Task[Throwable, B]): Task[Throwable, Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[Throwable, A])(fb: Eval[Task[Throwable, B]]): Task[Throwable, A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[Throwable, A])(fb: Eval[Task[Throwable, B]]): Task[Throwable, B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, [β$0$]Task[Throwable, β$0$], Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Task[Throwable, Unit]]): Task[Throwable, A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[Throwable, A])(recover: (Throwable) => B, f: (A) => B): Task[Throwable, B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[Throwable, A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Throwable, Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#attemptNarrow[EE,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[Throwable, A]): EitherT[[β$0$]Task[Throwable, β$0$], Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[Throwable, G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[Throwable, G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[Throwable, A]): Task[Throwable, List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[Throwable, A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Throwable, Boolean])(ifTrue: Task[Throwable, A], ifFalse: Task[Throwable, A]): Task[Throwable, A]", "member" : "cats.Apply.ifA", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[Throwable, G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[Throwable, A], fb: Eval[Task[Throwable, B]])(f: (A, B) => Z): Eval[Task[Throwable, Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.Apply.<*", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.Apply.*>", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[Throwable, (A) => B])(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.Apply.<*>", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5]): Task[Throwable, (A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4]): Task[Throwable, (A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3]): Task[Throwable, (A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3])(f: (A0, A1, A2, A3) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2]): Task[Throwable, (A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2])(f: (A0, A1, A2) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[Throwable, (A0, A1, A2) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[Throwable, A], f2: Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[Throwable, G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[Throwable, G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Throwable, Boolean])(ifTrue: => A, ifFalse: => A): Task[Throwable, A]", "member" : "cats.Functor.ifF", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[Throwable, (A, B)]): (Task[Throwable, A], Task[Throwable, B])", "member" : "cats.Functor.unzip", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, (A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, (B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, B]", "member" : "cats.Functor.as", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, (A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Functor.void", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[Throwable, A]) => Task[Throwable, B]", "member" : "cats.Functor.lift", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.Functor.widen", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, B]", "member" : "cats.Functor.fmap", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[Throwable, A])(f: (A) => B)(g: (B) => A): Task[Throwable, B]", "member" : "cats.Functor.imap", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/instances\/CatsAsyncForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/instances\/CatsAsyncForTask.html", "kind" : "class"}, {"name" : "monix.bio.instances.CatsBaseForTask", "shortDescription" : "Cats type class instances for Taskfor  cats.MonadError, CoflatMap, SemigroupK and Bifunctor(and implicitly for Applicative, Monad, etc).", "members_class" : [{"label" : "bimap", "tail" : "(fab: Task[A, B])(f: (A) => C, g: (B) => D): Task[C, D]", "member" : "monix.bio.instances.CatsBaseForTask.bimap", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#bimap[A,B,C,D](fab:monix.bio.Task[A,B])(f:A=>C,g:B=>D):monix.bio.Task[C,D]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[E, A], tb: Task[E, A]): Task[E, A]", "member" : "monix.bio.instances.CatsBaseForTask.combineK", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#combineK[A](ta:monix.bio.Task[E,A],tb:monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[E, A]): Task[E, Task[E, A]]", "member" : "monix.bio.instances.CatsBaseForTask.coflatten", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#coflatten[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,monix.bio.Task[E,A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[E, A])(f: (Task[E, A]) => B): Task[E, B]", "member" : "monix.bio.instances.CatsBaseForTask.coflatMap", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#coflatMap[A,B](fa:monix.bio.Task[E,A])(f:monix.bio.Task[E,A]=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, E]): Task[E, A]", "member" : "monix.bio.instances.CatsBaseForTask.fromTry", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, E]): Task[E, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, E]): Task[E, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[E, A]): Task[E, Either[E, A]]", "member" : "monix.bio.instances.CatsBaseForTask.attempt", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#attempt[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,Either[E,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[E, A])(pf: PartialFunction[E, Task[E, A]]): Task[E, A]", "member" : "monix.bio.instances.CatsBaseForTask.recoverWith", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#recoverWith[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[E, A])(pf: PartialFunction[E, A]): Task[E, A]", "member" : "monix.bio.instances.CatsBaseForTask.recover", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#recover[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[E, A])(f: (E) => Task[E, A]): Task[E, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#handleErrorWith[A](fa:monix.bio.Task[E,A])(f:E=>monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[E, A])(f: (E) => A): Task[E, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleError", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#handleError[A](fa:monix.bio.Task[E,A])(f:E=>A):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: E): Task[E, A]", "member" : "monix.bio.instances.CatsBaseForTask.raiseError", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#raiseError[A](e:E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[E, A])(f: (A) => B): Task[E, B]", "member" : "monix.bio.instances.CatsBaseForTask.map", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map[A,B](fa:monix.bio.Task[E,A])(f:A=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[E, A], fb: Task[E, B]): Task[E, (A, B)]", "member" : "monix.bio.instances.CatsBaseForTask.product", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#product[A,B](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B]):monix.bio.Task[E,(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[E, A], fb: Task[E, B])(f: (A, B) => Z): Task[E, Z]", "member" : "monix.bio.instances.CatsBaseForTask.map2", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map2[A,B,Z](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B])(f:(A,B)=>Z):monix.bio.Task[E,Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[E, (A) => B])(fa: Task[E, A]): Task[E, B]", "member" : "monix.bio.instances.CatsBaseForTask.ap", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap[A,B](ff:monix.bio.Task[E,A=>B])(fa:monix.bio.Task[E,A]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[E, Either[A, B]]): Task[E, B]", "member" : "monix.bio.instances.CatsBaseForTask.tailRecM", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tailRecM[A,B](a:A)(f:A=>monix.bio.Task[E,Either[A,B]]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[E, Task[E, A]]): Task[E, A]", "member" : "monix.bio.instances.CatsBaseForTask.flatten", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#flatten[A](ffa:monix.bio.Task[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[E, A])(f: (A) => Task[E, B]): Task[E, B]", "member" : "monix.bio.instances.CatsBaseForTask.flatMap", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#flatMap[A,B](fa:monix.bio.Task[E,A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "monix.bio.instances.CatsBaseForTask.unit", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#unit:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): UIO[A]", "member" : "monix.bio.instances.CatsBaseForTask.pure", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#pure[A](a:A):monix.bio.UIO[A]", "kind" : "def"}, {"member" : "monix.bio.instances.CatsBaseForTask#<init>", "error" : "unsupported entity"}, {"label" : "leftWiden", "tail" : "(fab: Task[A, B]): Task[AA, B]", "member" : "cats.Bifunctor.leftWiden", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#leftWiden[A,B,AA>:A](fab:F[A,B]):F[AA,B]", "kind" : "def"}, {"label" : "compose", "tail" : "(G0: Bifunctor[G]): Bifunctor[[α, β]Task[G[α, β], G[α, β]]]", "member" : "cats.Bifunctor.compose", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#compose[G[_,_]](implicitG0:cats.Bifunctor[G]):cats.Bifunctor[[α,β]F[G[α,β],G[α,β]]]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(fab: Task[A, B])(f: (A) => C): Task[C, B]", "member" : "cats.Bifunctor.leftMap", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#leftMap[A,B,C](fab:F[A,B])(f:A=>C):F[C,B]", "kind" : "def"}, {"label" : "leftFunctor", "tail" : "(): Functor[[α$1$]Task[α$1$, X]]", "member" : "cats.Bifunctor.leftFunctor", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#leftFunctor[X]:cats.Functor[[α$1$]F[α$1$,X]]", "kind" : "def"}, {"label" : "rightFunctor", "tail" : "(): Functor[[β$0$]Task[X, β$0$]]", "member" : "cats.Bifunctor.rightFunctor", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#rightFunctor[X]:cats.Functor[[β$0$]F[X,β$0$]]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[E, A], fb: Task[E, B])(F: Functor[[β$2$]Task[E, β$2$]]): Task[E, Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[E, G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[E, A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[E, A])(pf: PartialFunction[E, E]): Task[E, A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[E, A])(recover: (E) => Task[E, B], bind: (A) => Task[E, B]): Task[E, B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[E, Either[EE, A]]): Task[E, A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[E, A])(error: (A) => E)(predicate: (A) => Boolean): Task[E, A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[E, A])(error: => E)(predicate: (A) => Boolean): Task[E, A]", "member" : "cats.MonadError.ensure", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[E, A])(p: (A) => Boolean): Task[E, A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[E, A])(p: (A) => Boolean): Task[E, A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[E, A])(p: (A) => Boolean): Task[E, A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[E, A])(p: (A) => Boolean): Task[E, A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[E, A])(cond: => Task[E, Boolean]): Task[E, Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[E, A])(cond: => Task[E, Boolean])(G: Alternative[G]): Task[E, G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[E, Boolean])(body: => Task[E, A]): Task[E, Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[E, Boolean])(body: => Task[E, A])(G: Alternative[G]): Task[E, G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[E, Option[A]]): Task[E, A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[E, A]): Task[E, B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[E, A]): Task[E, B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[E, A])(f: (A) => Task[E, B]): Task[E, A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[E, Boolean])(ifTrue: => Task[E, B], ifFalse: => Task[E, B]): Task[E, B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[E, A])(f: (A) => Task[E, B]): Task[E, (A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[E, A])(fb: Task[E, B]): Task[E, A]", "member" : "cats.FlatMap.productL", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[E, A])(fb: Task[E, B]): Task[E, B]", "member" : "cats.FlatMap.productR", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[E, (A, B) => Z])(fa: Task[E, A], fb: Task[E, B]): Task[E, Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[E, A])(fb: Eval[Task[E, B]]): Task[E, A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[E, A])(fb: Eval[Task[E, B]]): Task[E, B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[E, A]): Task[E, A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => E): Task[E, A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[E, A]): Task[E, A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, [β$0$]Task[E, β$0$], E]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[E, A])(pf: PartialFunction[E, Task[E, Unit]]): Task[E, A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[E, A])(recover: (E) => B, f: (A) => B): Task[E, B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[E, A])(tag: ClassTag[EE], ev: <:<[EE, E]): Task[E, Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#attemptNarrow[EE,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[E, A]): EitherT[[β$0$]Task[E, β$0$], E, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[E, A]): Task[E, Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[E, A]): Task[E, Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[E, G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[E, G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[E, A]): Task[E, List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[E, A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[E, Boolean])(ifTrue: Task[E, A], ifFalse: Task[E, A]): Task[E, A]", "member" : "cats.Apply.ifA", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[E, G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[E, A], fb: Eval[Task[E, B]])(f: (A, B) => Z): Eval[Task[E, Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[E, A])(fb: Task[E, B]): Task[E, A]", "member" : "cats.Apply.<*", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[E, A])(fb: Task[E, B]): Task[E, B]", "member" : "cats.Apply.*>", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[E, (A) => B])(fa: Task[E, A]): Task[E, B]", "member" : "cats.Apply.<*>", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18], f19: Task[E, A19], f20: Task[E, A20], f21: Task[E, A21]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18], f19: Task[E, A19], f20: Task[E, A20], f21: Task[E, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18], f19: Task[E, A19], f20: Task[E, A20], f21: Task[E, A21]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18], f19: Task[E, A19], f20: Task[E, A20]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18], f19: Task[E, A19], f20: Task[E, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18], f19: Task[E, A19], f20: Task[E, A20]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18], f19: Task[E, A19]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18], f19: Task[E, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18], f19: Task[E, A19]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17], f18: Task[E, A18]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16], f17: Task[E, A17]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15], f16: Task[E, A16]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14], f15: Task[E, A15]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13], f14: Task[E, A14]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12], f13: Task[E, A13]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11], f12: Task[E, A12]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10], f11: Task[E, A11]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9], f10: Task[E, A10]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8], f9: Task[E, A9]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7], f8: Task[E, A8]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7]): Task[E, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6], f7: Task[E, A7]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6]): Task[E, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5], f6: Task[E, A6]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5]): Task[E, (A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4, A5) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4], f5: Task[E, A5]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4]): Task[E, (A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4])(f: (A0, A1, A2, A3, A4) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[E, (A0, A1, A2, A3, A4) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3], f4: Task[E, A4]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3]): Task[E, (A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3])(f: (A0, A1, A2, A3) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[E, (A0, A1, A2, A3) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2], f3: Task[E, A3]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2]): Task[E, (A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2])(f: (A0, A1, A2) => Z): Task[E, Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[E, (A0, A1, A2) => Z])(f0: Task[E, A0], f1: Task[E, A1], f2: Task[E, A2]): Task[E, Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[E, A], f2: Task[E, B]): Task[E, (A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[E, G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[E, G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[E, G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[E, Boolean])(ifTrue: => A, ifFalse: => A): Task[E, A]", "member" : "cats.Functor.ifF", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[E, (A, B)]): (Task[E, A], Task[E, B])", "member" : "cats.Functor.unzip", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[E, A], b: B): Task[E, (A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[E, A], b: B): Task[E, (B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[E, A], b: B): Task[E, B]", "member" : "cats.Functor.as", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[E, A])(f: (A) => B): Task[E, (A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[E, A]): Task[E, Unit]", "member" : "cats.Functor.void", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[E, A]) => Task[E, B]", "member" : "cats.Functor.lift", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[E, A]): Task[E, B]", "member" : "cats.Functor.widen", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[E, A])(f: (A) => B): Task[E, B]", "member" : "cats.Functor.fmap", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[E, A])(f: (A) => B)(g: (B) => A): Task[E, B]", "member" : "cats.Functor.imap", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[E, G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[E, G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/instances\/CatsBaseForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/instances\/CatsBaseForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/instances\/CatsBaseForTask.html", "kind" : "class"}, {"name" : "monix.bio.instances.CatsConcurrentEffectForTask", "shortDescription" : "Cats type class instances of Task forcats.effect.ConcurrentEffect.", "members_class" : [{"label" : "race", "tail" : "(fa: Unsafe[A], fb: Unsafe[B]): Unsafe[Either[A, B]]", "member" : "monix.bio.instances.CatsConcurrentEffectForTask.race", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#race[A,B](fa:monix.bio.Task.Unsafe[A],fb:monix.bio.Task.Unsafe[B]):monix.bio.Task.Unsafe[Either[A,B]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: Unsafe[A], fb: Unsafe[B]): Unsafe[Either[(A, Fiber[Throwable, B]), (Fiber[Throwable, A], B)]]", "member" : "monix.bio.instances.CatsConcurrentEffectForTask.racePair", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#racePair[A,B](fa:monix.bio.Task.Unsafe[A],fb:monix.bio.Task.Unsafe[B]):monix.bio.Task.Unsafe[Either[(A,monix.bio.Fiber[Throwable,B]),(monix.bio.Fiber[Throwable,A],B)]]", "kind" : "def"}, {"label" : "start", "tail" : "(fa: Unsafe[A]): Unsafe[Fiber[Throwable, A]]", "member" : "monix.bio.instances.CatsConcurrentEffectForTask.start", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#start[A](fa:monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[monix.bio.Fiber[Throwable,A]]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Unsafe[A]): Unsafe[A]", "member" : "monix.bio.instances.CatsConcurrentEffectForTask.uncancelable", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#uncancelable[A](fa:monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(k: ((Either[Throwable, A]) => Unit) => CancelToken[Unsafe]): Unsafe[A]", "member" : "monix.bio.instances.CatsConcurrentEffectForTask.cancelable", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#cancelable[A](k:(Either[Throwable,A]=>Unit)=>cats.effect.CancelToken[monix.bio.Task.Unsafe]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "runCancelable", "tail" : "(fa: Unsafe[A])(cb: (Either[Throwable, A]) => IO[Unit]): SyncIO[CancelToken[Unsafe]]", "member" : "monix.bio.instances.CatsConcurrentEffectForTask.runCancelable", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#runCancelable[A](fa:monix.bio.Task.Unsafe[A])(cb:Either[Throwable,A]=>cats.effect.IO[Unit]):cats.effect.SyncIO[cats.effect.CancelToken[monix.bio.Task.Unsafe]]", "kind" : "def"}, {"member" : "monix.bio.instances.CatsConcurrentEffectForTask#<init>", "error" : "unsupported entity"}, {"label" : "toIO", "tail" : "(fa: Unsafe[A]): IO[A]", "member" : "cats.effect.ConcurrentEffect.toIO", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#toIO[A](fa:F[A]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "continual", "tail" : "(fa: Unsafe[A])(f: (Either[Throwable, A]) => Unsafe[B]): Unsafe[B]", "member" : "cats.effect.Concurrent.continual", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#continual[A,B](fa:F[A])(f:scala.util.Either[Throwable,A]=>F[B]):F[B]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Unsafe[A]", "member" : "cats.effect.Concurrent.liftIO", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "background", "tail" : "(fa: Unsafe[A]): Resource[Unsafe, Unsafe[A]]", "member" : "cats.effect.Concurrent.background", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#background[A](fa:F[A]):cats.effect.Resource[F,F[A]]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: Unsafe[A])(use: (A) => Unsafe[B])(release: (A, ExitCase[Throwable]) => Unsafe[Unit]): Unsafe[B]", "member" : "monix.bio.instances.CatsEffectForTask.bracketCase", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#bracketCase[A,B](acquire:monix.bio.Task.Unsafe[A])(use:A=>monix.bio.Task.Unsafe[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Unsafe[A])(use: (A) => Unsafe[B])(release: (A) => Unsafe[Unit]): Unsafe[B]", "member" : "monix.bio.instances.CatsEffectForTask.bracket", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#bracket[A,B](acquire:monix.bio.Task.Unsafe[A])(use:A=>monix.bio.Task.Unsafe[B])(release:A=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[B]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsEffectForTask.asyncF", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#asyncF[A](k:(Either[Throwable,A]=>Unit)=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): Unsafe[A]", "member" : "monix.bio.instances.CatsEffectForTask.async", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "monix.bio.instances.CatsEffectForTask.suspend", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#suspend[A](fa:=>monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Unsafe[A]", "member" : "monix.bio.instances.CatsEffectForTask.delay", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#delay[A](thunk:=>A):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "runAsync", "tail" : "(fa: Unsafe[A])(cb: (Either[Throwable, A]) => IO[Unit]): SyncIO[Unit]", "member" : "monix.bio.instances.CatsEffectForTask.runAsync", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#runAsync[A](fa:monix.bio.Task.Unsafe[A])(cb:Either[Throwable,A]=>cats.effect.IO[Unit]):cats.effect.SyncIO[Unit]", "kind" : "def"}, {"label" : "never", "tail" : "(): Unsafe[A]", "member" : "cats.effect.Async.never", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#never[A]:F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Unsafe[A]) => Unsafe[A]): Unsafe[A]", "member" : "cats.Defer.fix", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Unsafe[A])(finalizer: Unsafe[Unit]): Unsafe[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: Unsafe[A])(finalizer: (ExitCase[Throwable]) => Unsafe[Unit]): Unsafe[A]", "member" : "cats.effect.Bracket.guaranteeCase", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#guaranteeCase[A](fa:F[A])(finalizer:cats.effect.ExitCase[E]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: Unsafe[A])(finalizer: Unsafe[Unit]): Unsafe[A]", "member" : "cats.effect.Bracket.guarantee", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#guarantee[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "bimap", "tail" : "(fab: Task[A, B])(f: (A) => C, g: (B) => D): Task[C, D]", "member" : "monix.bio.instances.CatsBaseForTask.bimap", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#bimap[A,B,C,D](fab:monix.bio.Task[A,B])(f:A=>C,g:B=>D):monix.bio.Task[C,D]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[Throwable, A], tb: Task[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.combineK", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#combineK[A](ta:monix.bio.Task[E,A],tb:monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Task[Throwable, A]]", "member" : "monix.bio.instances.CatsBaseForTask.coflatten", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#coflatten[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,monix.bio.Task[E,A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[Throwable, A])(f: (Task[Throwable, A]) => B): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.coflatMap", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#coflatMap[A,B](fa:monix.bio.Task[E,A])(f:monix.bio.Task[E,A]=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.fromTry", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Either[Throwable, A]]", "member" : "monix.bio.instances.CatsBaseForTask.attempt", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#attempt[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,Either[E,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Task[Throwable, A]]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.recoverWith", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#recoverWith[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.recover", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#recover[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[Throwable, A])(f: (Throwable) => Task[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#handleErrorWith[A](fa:monix.bio.Task[E,A])(f:E=>monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[Throwable, A])(f: (Throwable) => A): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleError", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#handleError[A](fa:monix.bio.Task[E,A])(f:E=>A):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.raiseError", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#raiseError[A](e:E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.map", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map[A,B](fa:monix.bio.Task[E,A])(f:A=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "monix.bio.instances.CatsBaseForTask.product", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#product[A,B](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B]):monix.bio.Task[E,(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B])(f: (A, B) => Z): Task[Throwable, Z]", "member" : "monix.bio.instances.CatsBaseForTask.map2", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map2[A,B,Z](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B])(f:(A,B)=>Z):monix.bio.Task[E,Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[Throwable, (A) => B])(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.ap", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap[A,B](ff:monix.bio.Task[E,A=>B])(fa:monix.bio.Task[E,A]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Throwable, Either[A, B]]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.tailRecM", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tailRecM[A,B](a:A)(f:A=>monix.bio.Task[E,Either[A,B]]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Throwable, Task[Throwable, A]]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.flatten", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#flatten[A](ffa:monix.bio.Task[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.flatMap", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#flatMap[A,B](fa:monix.bio.Task[E,A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "monix.bio.instances.CatsBaseForTask.unit", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#unit:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): UIO[A]", "member" : "monix.bio.instances.CatsBaseForTask.pure", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#pure[A](a:A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "leftWiden", "tail" : "(fab: Task[A, B]): Task[AA, B]", "member" : "cats.Bifunctor.leftWiden", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#leftWiden[A,B,AA>:A](fab:F[A,B]):F[AA,B]", "kind" : "def"}, {"label" : "compose", "tail" : "(G0: Bifunctor[G]): Bifunctor[[α, β]Task[G[α, β], G[α, β]]]", "member" : "cats.Bifunctor.compose", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#compose[G[_,_]](implicitG0:cats.Bifunctor[G]):cats.Bifunctor[[α,β]F[G[α,β],G[α,β]]]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(fab: Task[A, B])(f: (A) => C): Task[C, B]", "member" : "cats.Bifunctor.leftMap", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#leftMap[A,B,C](fab:F[A,B])(f:A=>C):F[C,B]", "kind" : "def"}, {"label" : "leftFunctor", "tail" : "(): Functor[[α$1$]Task[α$1$, X]]", "member" : "cats.Bifunctor.leftFunctor", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#leftFunctor[X]:cats.Functor[[α$1$]F[α$1$,X]]", "kind" : "def"}, {"label" : "rightFunctor", "tail" : "(): Functor[[β$0$]Task[X, β$0$]]", "member" : "cats.Bifunctor.rightFunctor", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#rightFunctor[X]:cats.Functor[[β$0$]F[X,β$0$]]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B])(F: Functor[[β$2$]Task[Throwable, β$2$]]): Task[Throwable, Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[Throwable, G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[Throwable, A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Throwable]): Task[Throwable, A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[Throwable, A])(recover: (Throwable) => Task[Throwable, B], bind: (A) => Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Throwable, Either[EE, A]]): Task[Throwable, A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[Throwable, A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[Throwable, A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[Throwable, A])(error: => Throwable)(predicate: (A) => Boolean): Task[Throwable, A]", "member" : "cats.MonadError.ensure", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[Throwable, A])(cond: => Task[Throwable, Boolean]): Task[Throwable, Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[Throwable, A])(cond: => Task[Throwable, Boolean])(G: Alternative[G]): Task[Throwable, G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Throwable, Boolean])(body: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Throwable, Boolean])(body: => Task[Throwable, A])(G: Alternative[G]): Task[Throwable, G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Throwable, Option[A]]): Task[Throwable, A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Throwable, Boolean])(ifTrue: => Task[Throwable, B], ifFalse: => Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.FlatMap.productL", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.FlatMap.productR", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[Throwable, (A, B) => Z])(fa: Task[Throwable, A], fb: Task[Throwable, B]): Task[Throwable, Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[Throwable, A])(fb: Eval[Task[Throwable, B]]): Task[Throwable, A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[Throwable, A])(fb: Eval[Task[Throwable, B]]): Task[Throwable, B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, [β$0$]Task[Throwable, β$0$], Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Task[Throwable, Unit]]): Task[Throwable, A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[Throwable, A])(recover: (Throwable) => B, f: (A) => B): Task[Throwable, B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[Throwable, A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Throwable, Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#attemptNarrow[EE,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[Throwable, A]): EitherT[[β$0$]Task[Throwable, β$0$], Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[Throwable, G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[Throwable, G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[Throwable, A]): Task[Throwable, List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[Throwable, A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Throwable, Boolean])(ifTrue: Task[Throwable, A], ifFalse: Task[Throwable, A]): Task[Throwable, A]", "member" : "cats.Apply.ifA", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[Throwable, G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[Throwable, A], fb: Eval[Task[Throwable, B]])(f: (A, B) => Z): Eval[Task[Throwable, Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.Apply.<*", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.Apply.*>", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[Throwable, (A) => B])(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.Apply.<*>", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5]): Task[Throwable, (A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4]): Task[Throwable, (A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3]): Task[Throwable, (A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3])(f: (A0, A1, A2, A3) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2]): Task[Throwable, (A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2])(f: (A0, A1, A2) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[Throwable, (A0, A1, A2) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[Throwable, A], f2: Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[Throwable, G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[Throwable, G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Throwable, Boolean])(ifTrue: => A, ifFalse: => A): Task[Throwable, A]", "member" : "cats.Functor.ifF", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[Throwable, (A, B)]): (Task[Throwable, A], Task[Throwable, B])", "member" : "cats.Functor.unzip", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, (A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, (B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, B]", "member" : "cats.Functor.as", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, (A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Functor.void", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[Throwable, A]) => Task[Throwable, B]", "member" : "cats.Functor.lift", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.Functor.widen", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, B]", "member" : "cats.Functor.fmap", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[Throwable, A])(f: (A) => B)(g: (B) => A): Task[Throwable, B]", "member" : "cats.Functor.imap", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/instances\/CatsConcurrentEffectForTask.html", "kind" : "class"}, {"name" : "monix.bio.instances.CatsConcurrentForTask", "shortDescription" : "Cats type class instance of Taskfor  cats.effect.Concurrent.", "object" : "monix\/bio\/instances\/CatsConcurrentForTask$.html", "members_class" : [{"label" : "race", "tail" : "(fa: Unsafe[A], fb: Unsafe[B]): Unsafe[Either[A, B]]", "member" : "monix.bio.instances.CatsConcurrentForTask.race", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#race[A,B](fa:monix.bio.Task.Unsafe[A],fb:monix.bio.Task.Unsafe[B]):monix.bio.Task.Unsafe[Either[A,B]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: Unsafe[A], fb: Unsafe[B]): Unsafe[Either[(A, Fiber[Throwable, B]), (Fiber[Throwable, A], B)]]", "member" : "monix.bio.instances.CatsConcurrentForTask.racePair", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#racePair[A,B](fa:monix.bio.Task.Unsafe[A],fb:monix.bio.Task.Unsafe[B]):monix.bio.Task.Unsafe[Either[(A,monix.bio.Fiber[Throwable,B]),(monix.bio.Fiber[Throwable,A],B)]]", "kind" : "def"}, {"label" : "start", "tail" : "(fa: Unsafe[A]): Unsafe[Fiber[Throwable, A]]", "member" : "monix.bio.instances.CatsConcurrentForTask.start", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#start[A](fa:monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[monix.bio.Fiber[Throwable,A]]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Unsafe[A]): Unsafe[A]", "member" : "monix.bio.instances.CatsConcurrentForTask.uncancelable", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#uncancelable[A](fa:monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(k: ((Either[Throwable, A]) => Unit) => CancelToken[Unsafe]): Unsafe[A]", "member" : "monix.bio.instances.CatsConcurrentForTask.cancelable", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#cancelable[A](k:(Either[Throwable,A]=>Unit)=>cats.effect.CancelToken[monix.bio.Task.Unsafe]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"member" : "monix.bio.instances.CatsConcurrentForTask#<init>", "error" : "unsupported entity"}, {"label" : "continual", "tail" : "(fa: Unsafe[A])(f: (Either[Throwable, A]) => Unsafe[B]): Unsafe[B]", "member" : "cats.effect.Concurrent.continual", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#continual[A,B](fa:F[A])(f:scala.util.Either[Throwable,A]=>F[B]):F[B]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Unsafe[A]", "member" : "cats.effect.Concurrent.liftIO", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "background", "tail" : "(fa: Unsafe[A]): Resource[Unsafe, Unsafe[A]]", "member" : "cats.effect.Concurrent.background", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#background[A](fa:F[A]):cats.effect.Resource[F,F[A]]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(acquire: Unsafe[A])(finalizer: (ExitCase[Throwable]) => Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.guaranteeCase", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#guaranteeCase[A](acquire:monix.bio.Task.Unsafe[A])(finalizer:cats.effect.ExitCase[Throwable]=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(acquire: Unsafe[A])(finalizer: Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.guarantee", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#guarantee[A](acquire:monix.bio.Task.Unsafe[A])(finalizer:monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.asyncF", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#asyncF[A](k:(Either[Throwable,A]=>Unit)=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: Unsafe[A])(use: (A) => Unsafe[B])(release: (A, ExitCase[Throwable]) => Unsafe[Unit]): Unsafe[B]", "member" : "monix.bio.instances.CatsAsyncForTask.bracketCase", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#bracketCase[A,B](acquire:monix.bio.Task.Unsafe[A])(use:A=>monix.bio.Task.Unsafe[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Unsafe[A])(use: (A) => Unsafe[B])(release: (A) => Unsafe[Unit]): Unsafe[B]", "member" : "monix.bio.instances.CatsAsyncForTask.bracket", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#bracket[A,B](acquire:monix.bio.Task.Unsafe[A])(use:A=>monix.bio.Task.Unsafe[B])(release:A=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[B]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.async", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.suspend", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#suspend[A](fa:=>monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.delay", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#delay[A](thunk:=>A):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): Unsafe[A]", "member" : "cats.effect.Async.never", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#never[A]:F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Unsafe[A]) => Unsafe[A]): Unsafe[A]", "member" : "cats.Defer.fix", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Unsafe[A])(finalizer: Unsafe[Unit]): Unsafe[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "bimap", "tail" : "(fab: Task[A, B])(f: (A) => C, g: (B) => D): Task[C, D]", "member" : "monix.bio.instances.CatsBaseForTask.bimap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#bimap[A,B,C,D](fab:monix.bio.Task[A,B])(f:A=>C,g:B=>D):monix.bio.Task[C,D]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[Throwable, A], tb: Task[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.combineK", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#combineK[A](ta:monix.bio.Task[E,A],tb:monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Task[Throwable, A]]", "member" : "monix.bio.instances.CatsBaseForTask.coflatten", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#coflatten[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,monix.bio.Task[E,A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[Throwable, A])(f: (Task[Throwable, A]) => B): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.coflatMap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#coflatMap[A,B](fa:monix.bio.Task[E,A])(f:monix.bio.Task[E,A]=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.fromTry", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Either[Throwable, A]]", "member" : "monix.bio.instances.CatsBaseForTask.attempt", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#attempt[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,Either[E,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Task[Throwable, A]]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.recoverWith", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#recoverWith[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.recover", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#recover[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[Throwable, A])(f: (Throwable) => Task[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#handleErrorWith[A](fa:monix.bio.Task[E,A])(f:E=>monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[Throwable, A])(f: (Throwable) => A): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleError", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#handleError[A](fa:monix.bio.Task[E,A])(f:E=>A):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.raiseError", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#raiseError[A](e:E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.map", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map[A,B](fa:monix.bio.Task[E,A])(f:A=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "monix.bio.instances.CatsBaseForTask.product", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#product[A,B](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B]):monix.bio.Task[E,(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B])(f: (A, B) => Z): Task[Throwable, Z]", "member" : "monix.bio.instances.CatsBaseForTask.map2", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map2[A,B,Z](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B])(f:(A,B)=>Z):monix.bio.Task[E,Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[Throwable, (A) => B])(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.ap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap[A,B](ff:monix.bio.Task[E,A=>B])(fa:monix.bio.Task[E,A]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Throwable, Either[A, B]]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.tailRecM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tailRecM[A,B](a:A)(f:A=>monix.bio.Task[E,Either[A,B]]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Throwable, Task[Throwable, A]]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.flatten", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#flatten[A](ffa:monix.bio.Task[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.flatMap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#flatMap[A,B](fa:monix.bio.Task[E,A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "monix.bio.instances.CatsBaseForTask.unit", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#unit:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): UIO[A]", "member" : "monix.bio.instances.CatsBaseForTask.pure", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#pure[A](a:A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "leftWiden", "tail" : "(fab: Task[A, B]): Task[AA, B]", "member" : "cats.Bifunctor.leftWiden", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#leftWiden[A,B,AA>:A](fab:F[A,B]):F[AA,B]", "kind" : "def"}, {"label" : "compose", "tail" : "(G0: Bifunctor[G]): Bifunctor[[α, β]Task[G[α, β], G[α, β]]]", "member" : "cats.Bifunctor.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#compose[G[_,_]](implicitG0:cats.Bifunctor[G]):cats.Bifunctor[[α,β]F[G[α,β],G[α,β]]]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(fab: Task[A, B])(f: (A) => C): Task[C, B]", "member" : "cats.Bifunctor.leftMap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#leftMap[A,B,C](fab:F[A,B])(f:A=>C):F[C,B]", "kind" : "def"}, {"label" : "leftFunctor", "tail" : "(): Functor[[α$1$]Task[α$1$, X]]", "member" : "cats.Bifunctor.leftFunctor", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#leftFunctor[X]:cats.Functor[[α$1$]F[α$1$,X]]", "kind" : "def"}, {"label" : "rightFunctor", "tail" : "(): Functor[[β$0$]Task[X, β$0$]]", "member" : "cats.Bifunctor.rightFunctor", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#rightFunctor[X]:cats.Functor[[β$0$]F[X,β$0$]]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B])(F: Functor[[β$2$]Task[Throwable, β$2$]]): Task[Throwable, Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[Throwable, G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[Throwable, A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Throwable]): Task[Throwable, A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[Throwable, A])(recover: (Throwable) => Task[Throwable, B], bind: (A) => Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Throwable, Either[EE, A]]): Task[Throwable, A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[Throwable, A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[Throwable, A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[Throwable, A])(error: => Throwable)(predicate: (A) => Boolean): Task[Throwable, A]", "member" : "cats.MonadError.ensure", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[Throwable, A])(cond: => Task[Throwable, Boolean]): Task[Throwable, Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[Throwable, A])(cond: => Task[Throwable, Boolean])(G: Alternative[G]): Task[Throwable, G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Throwable, Boolean])(body: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Throwable, Boolean])(body: => Task[Throwable, A])(G: Alternative[G]): Task[Throwable, G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Throwable, Option[A]]): Task[Throwable, A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Throwable, Boolean])(ifTrue: => Task[Throwable, B], ifFalse: => Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.FlatMap.productL", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.FlatMap.productR", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[Throwable, (A, B) => Z])(fa: Task[Throwable, A], fb: Task[Throwable, B]): Task[Throwable, Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[Throwable, A])(fb: Eval[Task[Throwable, B]]): Task[Throwable, A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[Throwable, A])(fb: Eval[Task[Throwable, B]]): Task[Throwable, B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, [β$0$]Task[Throwable, β$0$], Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Task[Throwable, Unit]]): Task[Throwable, A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[Throwable, A])(recover: (Throwable) => B, f: (A) => B): Task[Throwable, B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[Throwable, A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Throwable, Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#attemptNarrow[EE,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[Throwable, A]): EitherT[[β$0$]Task[Throwable, β$0$], Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[Throwable, G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[Throwable, G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[Throwable, A]): Task[Throwable, List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[Throwable, A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Throwable, Boolean])(ifTrue: Task[Throwable, A], ifFalse: Task[Throwable, A]): Task[Throwable, A]", "member" : "cats.Apply.ifA", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[Throwable, G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[Throwable, A], fb: Eval[Task[Throwable, B]])(f: (A, B) => Z): Eval[Task[Throwable, Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.Apply.<*", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.Apply.*>", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[Throwable, (A) => B])(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.Apply.<*>", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5]): Task[Throwable, (A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4]): Task[Throwable, (A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3]): Task[Throwable, (A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3])(f: (A0, A1, A2, A3) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2]): Task[Throwable, (A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2])(f: (A0, A1, A2) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[Throwable, (A0, A1, A2) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[Throwable, A], f2: Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[Throwable, G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[Throwable, G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Throwable, Boolean])(ifTrue: => A, ifFalse: => A): Task[Throwable, A]", "member" : "cats.Functor.ifF", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[Throwable, (A, B)]): (Task[Throwable, A], Task[Throwable, B])", "member" : "cats.Functor.unzip", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, (A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, (B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, B]", "member" : "cats.Functor.as", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, (A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Functor.void", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[Throwable, A]) => Task[Throwable, B]", "member" : "cats.Functor.lift", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.Functor.widen", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, B]", "member" : "cats.Functor.fmap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[Throwable, A])(f: (A) => B)(g: (B) => A): Task[Throwable, B]", "member" : "cats.Functor.imap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/instances\/CatsConcurrentForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "race", "tail" : "(fa: Unsafe[A], fb: Unsafe[B]): Unsafe[Either[A, B]]", "member" : "monix.bio.instances.CatsConcurrentForTask.race", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#race[A,B](fa:monix.bio.Task.Unsafe[A],fb:monix.bio.Task.Unsafe[B]):monix.bio.Task.Unsafe[Either[A,B]]", "kind" : "def"}, {"label" : "racePair", "tail" : "(fa: Unsafe[A], fb: Unsafe[B]): Unsafe[Either[(A, Fiber[Throwable, B]), (Fiber[Throwable, A], B)]]", "member" : "monix.bio.instances.CatsConcurrentForTask.racePair", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#racePair[A,B](fa:monix.bio.Task.Unsafe[A],fb:monix.bio.Task.Unsafe[B]):monix.bio.Task.Unsafe[Either[(A,monix.bio.Fiber[Throwable,B]),(monix.bio.Fiber[Throwable,A],B)]]", "kind" : "def"}, {"label" : "start", "tail" : "(fa: Unsafe[A]): Unsafe[Fiber[Throwable, A]]", "member" : "monix.bio.instances.CatsConcurrentForTask.start", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#start[A](fa:monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[monix.bio.Fiber[Throwable,A]]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Unsafe[A]): Unsafe[A]", "member" : "monix.bio.instances.CatsConcurrentForTask.uncancelable", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#uncancelable[A](fa:monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "cancelable", "tail" : "(k: ((Either[Throwable, A]) => Unit) => CancelToken[Unsafe]): Unsafe[A]", "member" : "monix.bio.instances.CatsConcurrentForTask.cancelable", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#cancelable[A](k:(Either[Throwable,A]=>Unit)=>cats.effect.CancelToken[monix.bio.Task.Unsafe]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "continual", "tail" : "(fa: Unsafe[A])(f: (Either[Throwable, A]) => Unsafe[B]): Unsafe[B]", "member" : "cats.effect.Concurrent.continual", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#continual[A,B](fa:F[A])(f:scala.util.Either[Throwable,A]=>F[B]):F[B]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Unsafe[A]", "member" : "cats.effect.Concurrent.liftIO", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "background", "tail" : "(fa: Unsafe[A]): Resource[Unsafe, Unsafe[A]]", "member" : "cats.effect.Concurrent.background", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#background[A](fa:F[A]):cats.effect.Resource[F,F[A]]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(acquire: Unsafe[A])(finalizer: (ExitCase[Throwable]) => Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.guaranteeCase", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#guaranteeCase[A](acquire:monix.bio.Task.Unsafe[A])(finalizer:cats.effect.ExitCase[Throwable]=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(acquire: Unsafe[A])(finalizer: Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.guarantee", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#guarantee[A](acquire:monix.bio.Task.Unsafe[A])(finalizer:monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.asyncF", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#asyncF[A](k:(Either[Throwable,A]=>Unit)=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "bracketCase", "tail" : "(acquire: Unsafe[A])(use: (A) => Unsafe[B])(release: (A, ExitCase[Throwable]) => Unsafe[Unit]): Unsafe[B]", "member" : "monix.bio.instances.CatsAsyncForTask.bracketCase", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#bracketCase[A,B](acquire:monix.bio.Task.Unsafe[A])(use:A=>monix.bio.Task.Unsafe[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Unsafe[A])(use: (A) => Unsafe[B])(release: (A) => Unsafe[Unit]): Unsafe[B]", "member" : "monix.bio.instances.CatsAsyncForTask.bracket", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#bracket[A,B](acquire:monix.bio.Task.Unsafe[A])(use:A=>monix.bio.Task.Unsafe[B])(release:A=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[B]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.async", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.suspend", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#suspend[A](fa:=>monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Unsafe[A]", "member" : "monix.bio.instances.CatsAsyncForTask.delay", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#delay[A](thunk:=>A):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): Unsafe[A]", "member" : "cats.effect.Async.never", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#never[A]:F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Unsafe[A]) => Unsafe[A]): Unsafe[A]", "member" : "cats.Defer.fix", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Unsafe[A])(finalizer: Unsafe[Unit]): Unsafe[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "bimap", "tail" : "(fab: Task[A, B])(f: (A) => C, g: (B) => D): Task[C, D]", "member" : "monix.bio.instances.CatsBaseForTask.bimap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#bimap[A,B,C,D](fab:monix.bio.Task[A,B])(f:A=>C,g:B=>D):monix.bio.Task[C,D]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[Throwable, A], tb: Task[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.combineK", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#combineK[A](ta:monix.bio.Task[E,A],tb:monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Task[Throwable, A]]", "member" : "monix.bio.instances.CatsBaseForTask.coflatten", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#coflatten[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,monix.bio.Task[E,A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[Throwable, A])(f: (Task[Throwable, A]) => B): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.coflatMap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#coflatMap[A,B](fa:monix.bio.Task[E,A])(f:monix.bio.Task[E,A]=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.fromTry", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Either[Throwable, A]]", "member" : "monix.bio.instances.CatsBaseForTask.attempt", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#attempt[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,Either[E,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Task[Throwable, A]]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.recoverWith", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#recoverWith[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.recover", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#recover[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[Throwable, A])(f: (Throwable) => Task[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#handleErrorWith[A](fa:monix.bio.Task[E,A])(f:E=>monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[Throwable, A])(f: (Throwable) => A): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleError", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#handleError[A](fa:monix.bio.Task[E,A])(f:E=>A):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.raiseError", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#raiseError[A](e:E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.map", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map[A,B](fa:monix.bio.Task[E,A])(f:A=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "monix.bio.instances.CatsBaseForTask.product", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#product[A,B](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B]):monix.bio.Task[E,(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B])(f: (A, B) => Z): Task[Throwable, Z]", "member" : "monix.bio.instances.CatsBaseForTask.map2", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map2[A,B,Z](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B])(f:(A,B)=>Z):monix.bio.Task[E,Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[Throwable, (A) => B])(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.ap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap[A,B](ff:monix.bio.Task[E,A=>B])(fa:monix.bio.Task[E,A]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Throwable, Either[A, B]]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.tailRecM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tailRecM[A,B](a:A)(f:A=>monix.bio.Task[E,Either[A,B]]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Throwable, Task[Throwable, A]]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.flatten", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#flatten[A](ffa:monix.bio.Task[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.flatMap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#flatMap[A,B](fa:monix.bio.Task[E,A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "monix.bio.instances.CatsBaseForTask.unit", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#unit:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): UIO[A]", "member" : "monix.bio.instances.CatsBaseForTask.pure", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#pure[A](a:A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "leftWiden", "tail" : "(fab: Task[A, B]): Task[AA, B]", "member" : "cats.Bifunctor.leftWiden", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#leftWiden[A,B,AA>:A](fab:F[A,B]):F[AA,B]", "kind" : "def"}, {"label" : "compose", "tail" : "(G0: Bifunctor[G]): Bifunctor[[α, β]Task[G[α, β], G[α, β]]]", "member" : "cats.Bifunctor.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#compose[G[_,_]](implicitG0:cats.Bifunctor[G]):cats.Bifunctor[[α,β]F[G[α,β],G[α,β]]]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(fab: Task[A, B])(f: (A) => C): Task[C, B]", "member" : "cats.Bifunctor.leftMap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#leftMap[A,B,C](fab:F[A,B])(f:A=>C):F[C,B]", "kind" : "def"}, {"label" : "leftFunctor", "tail" : "(): Functor[[α$1$]Task[α$1$, X]]", "member" : "cats.Bifunctor.leftFunctor", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#leftFunctor[X]:cats.Functor[[α$1$]F[α$1$,X]]", "kind" : "def"}, {"label" : "rightFunctor", "tail" : "(): Functor[[β$0$]Task[X, β$0$]]", "member" : "cats.Bifunctor.rightFunctor", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#rightFunctor[X]:cats.Functor[[β$0$]F[X,β$0$]]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B])(F: Functor[[β$2$]Task[Throwable, β$2$]]): Task[Throwable, Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[Throwable, G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[Throwable, A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Throwable]): Task[Throwable, A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[Throwable, A])(recover: (Throwable) => Task[Throwable, B], bind: (A) => Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Throwable, Either[EE, A]]): Task[Throwable, A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[Throwable, A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[Throwable, A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[Throwable, A])(error: => Throwable)(predicate: (A) => Boolean): Task[Throwable, A]", "member" : "cats.MonadError.ensure", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[Throwable, A])(cond: => Task[Throwable, Boolean]): Task[Throwable, Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[Throwable, A])(cond: => Task[Throwable, Boolean])(G: Alternative[G]): Task[Throwable, G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Throwable, Boolean])(body: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Throwable, Boolean])(body: => Task[Throwable, A])(G: Alternative[G]): Task[Throwable, G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Throwable, Option[A]]): Task[Throwable, A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Throwable, Boolean])(ifTrue: => Task[Throwable, B], ifFalse: => Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.FlatMap.productL", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.FlatMap.productR", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[Throwable, (A, B) => Z])(fa: Task[Throwable, A], fb: Task[Throwable, B]): Task[Throwable, Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[Throwable, A])(fb: Eval[Task[Throwable, B]]): Task[Throwable, A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[Throwable, A])(fb: Eval[Task[Throwable, B]]): Task[Throwable, B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, [β$0$]Task[Throwable, β$0$], Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Task[Throwable, Unit]]): Task[Throwable, A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[Throwable, A])(recover: (Throwable) => B, f: (A) => B): Task[Throwable, B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[Throwable, A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Throwable, Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#attemptNarrow[EE,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[Throwable, A]): EitherT[[β$0$]Task[Throwable, β$0$], Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[Throwable, G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[Throwable, G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[Throwable, A]): Task[Throwable, List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[Throwable, A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Throwable, Boolean])(ifTrue: Task[Throwable, A], ifFalse: Task[Throwable, A]): Task[Throwable, A]", "member" : "cats.Apply.ifA", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[Throwable, G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[Throwable, A], fb: Eval[Task[Throwable, B]])(f: (A, B) => Z): Eval[Task[Throwable, Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.Apply.<*", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.Apply.*>", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[Throwable, (A) => B])(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.Apply.<*>", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5]): Task[Throwable, (A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4]): Task[Throwable, (A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3]): Task[Throwable, (A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3])(f: (A0, A1, A2, A3) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2]): Task[Throwable, (A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2])(f: (A0, A1, A2) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[Throwable, (A0, A1, A2) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[Throwable, A], f2: Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[Throwable, G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[Throwable, G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Throwable, Boolean])(ifTrue: => A, ifFalse: => A): Task[Throwable, A]", "member" : "cats.Functor.ifF", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[Throwable, (A, B)]): (Task[Throwable, A], Task[Throwable, B])", "member" : "cats.Functor.unzip", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, (A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, (B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, B]", "member" : "cats.Functor.as", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, (A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Functor.void", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[Throwable, A]) => Task[Throwable, B]", "member" : "cats.Functor.lift", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.Functor.widen", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, B]", "member" : "cats.Functor.fmap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[Throwable, A])(f: (A) => B)(g: (B) => A): Task[Throwable, B]", "member" : "cats.Functor.imap", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/instances\/CatsConcurrentForTask$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/instances\/CatsConcurrentForTask.html", "kind" : "class"}, {"name" : "monix.bio.instances.CatsEffectForTask", "shortDescription" : "Cats type class instances of Task forcats.effect.Effect (and implicitly for Applicative, Monad,MonadError, Sync, etc).", "members_class" : [{"label" : "bracketCase", "tail" : "(acquire: Unsafe[A])(use: (A) => Unsafe[B])(release: (A, ExitCase[Throwable]) => Unsafe[Unit]): Unsafe[B]", "member" : "monix.bio.instances.CatsEffectForTask.bracketCase", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#bracketCase[A,B](acquire:monix.bio.Task.Unsafe[A])(use:A=>monix.bio.Task.Unsafe[B])(release:(A,cats.effect.ExitCase[Throwable])=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[B]", "kind" : "def"}, {"label" : "bracket", "tail" : "(acquire: Unsafe[A])(use: (A) => Unsafe[B])(release: (A) => Unsafe[Unit]): Unsafe[B]", "member" : "monix.bio.instances.CatsEffectForTask.bracket", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#bracket[A,B](acquire:monix.bio.Task.Unsafe[A])(use:A=>monix.bio.Task.Unsafe[B])(release:A=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[B]", "kind" : "def"}, {"label" : "asyncF", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unsafe[Unit]): Unsafe[A]", "member" : "monix.bio.instances.CatsEffectForTask.asyncF", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#asyncF[A](k:(Either[Throwable,A]=>Unit)=>monix.bio.Task.Unsafe[Unit]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "async", "tail" : "(k: ((Either[Throwable, A]) => Unit) => Unit): Unsafe[A]", "member" : "monix.bio.instances.CatsEffectForTask.async", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#async[A](k:(Either[Throwable,A]=>Unit)=>Unit):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "suspend", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "monix.bio.instances.CatsEffectForTask.suspend", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#suspend[A](fa:=>monix.bio.Task.Unsafe[A]):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "delay", "tail" : "(thunk: => A): Unsafe[A]", "member" : "monix.bio.instances.CatsEffectForTask.delay", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#delay[A](thunk:=>A):monix.bio.Task.Unsafe[A]", "kind" : "def"}, {"label" : "runAsync", "tail" : "(fa: Unsafe[A])(cb: (Either[Throwable, A]) => IO[Unit]): SyncIO[Unit]", "member" : "monix.bio.instances.CatsEffectForTask.runAsync", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#runAsync[A](fa:monix.bio.Task.Unsafe[A])(cb:Either[Throwable,A]=>cats.effect.IO[Unit]):cats.effect.SyncIO[Unit]", "kind" : "def"}, {"member" : "monix.bio.instances.CatsEffectForTask#<init>", "error" : "unsupported entity"}, {"label" : "toIO", "tail" : "(fa: Unsafe[A]): IO[A]", "member" : "cats.effect.Effect.toIO", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#toIO[A](fa:F[A]):cats.effect.IO[A]", "kind" : "def"}, {"label" : "never", "tail" : "(): Unsafe[A]", "member" : "cats.effect.Async.never", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#never[A]:F[A]", "kind" : "def"}, {"label" : "liftIO", "tail" : "(ioa: IO[A]): Unsafe[A]", "member" : "cats.effect.Async.liftIO", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#liftIO[A](ioa:cats.effect.IO[A]):F[A]", "kind" : "def"}, {"label" : "defer", "tail" : "(fa: => Unsafe[A]): Unsafe[A]", "member" : "cats.effect.Sync.defer", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#defer[A](fa:=>F[A]):F[A]", "kind" : "final def"}, {"label" : "fix", "tail" : "(fn: (Unsafe[A]) => Unsafe[A]): Unsafe[A]", "member" : "cats.Defer.fix", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#fix[A](fn:F[A]=>F[A]):F[A]", "kind" : "def"}, {"label" : "onCancel", "tail" : "(fa: Unsafe[A])(finalizer: Unsafe[Unit]): Unsafe[A]", "member" : "cats.effect.Bracket.onCancel", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#onCancel[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "guaranteeCase", "tail" : "(fa: Unsafe[A])(finalizer: (ExitCase[Throwable]) => Unsafe[Unit]): Unsafe[A]", "member" : "cats.effect.Bracket.guaranteeCase", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#guaranteeCase[A](fa:F[A])(finalizer:cats.effect.ExitCase[E]=>F[Unit]):F[A]", "kind" : "def"}, {"label" : "guarantee", "tail" : "(fa: Unsafe[A])(finalizer: Unsafe[Unit]): Unsafe[A]", "member" : "cats.effect.Bracket.guarantee", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#guarantee[A](fa:F[A])(finalizer:F[Unit]):F[A]", "kind" : "def"}, {"label" : "uncancelable", "tail" : "(fa: Unsafe[A]): Unsafe[A]", "member" : "cats.effect.Bracket.uncancelable", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#uncancelable[A](fa:F[A]):F[A]", "kind" : "def"}, {"label" : "bimap", "tail" : "(fab: Task[A, B])(f: (A) => C, g: (B) => D): Task[C, D]", "member" : "monix.bio.instances.CatsBaseForTask.bimap", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#bimap[A,B,C,D](fab:monix.bio.Task[A,B])(f:A=>C,g:B=>D):monix.bio.Task[C,D]", "kind" : "def"}, {"label" : "combineK", "tail" : "(ta: Task[Throwable, A], tb: Task[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.combineK", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#combineK[A](ta:monix.bio.Task[E,A],tb:monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "coflatten", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Task[Throwable, A]]", "member" : "monix.bio.instances.CatsBaseForTask.coflatten", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#coflatten[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,monix.bio.Task[E,A]]", "kind" : "def"}, {"label" : "coflatMap", "tail" : "(fa: Task[Throwable, A])(f: (Task[Throwable, A]) => B): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.coflatMap", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#coflatMap[A,B](fa:monix.bio.Task[E,A])(f:monix.bio.Task[E,A]=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[A])(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.fromTry", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#fromTry[A](t:scala.util.Try[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatalEval", "tail" : "(a: Eval[A])(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatalEval", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#catchNonFatalEval[A](a:cats.Eval[A])(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "catchNonFatal", "tail" : "(a: => A)(ev: <:<[Throwable, Throwable]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.catchNonFatal", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#catchNonFatal[A](a:=>A)(implicitev:Throwable<:<E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "attempt", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Either[Throwable, A]]", "member" : "monix.bio.instances.CatsBaseForTask.attempt", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#attempt[A](fa:monix.bio.Task[E,A]):monix.bio.Task[E,Either[E,A]]", "kind" : "def"}, {"label" : "recoverWith", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Task[Throwable, A]]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.recoverWith", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#recoverWith[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "recover", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.recover", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#recover[A](fa:monix.bio.Task[E,A])(pf:PartialFunction[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleErrorWith", "tail" : "(fa: Task[Throwable, A])(f: (Throwable) => Task[Throwable, A]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleErrorWith", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#handleErrorWith[A](fa:monix.bio.Task[E,A])(f:E=>monix.bio.Task[E,A]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "handleError", "tail" : "(fa: Task[Throwable, A])(f: (Throwable) => A): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.handleError", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#handleError[A](fa:monix.bio.Task[E,A])(f:E=>A):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "raiseError", "tail" : "(e: Throwable): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.raiseError", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#raiseError[A](e:E):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "map", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.map", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map[A,B](fa:monix.bio.Task[E,A])(f:A=>B):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "product", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "monix.bio.instances.CatsBaseForTask.product", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#product[A,B](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B]):monix.bio.Task[E,(A,B)]", "kind" : "def"}, {"label" : "map2", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B])(f: (A, B) => Z): Task[Throwable, Z]", "member" : "monix.bio.instances.CatsBaseForTask.map2", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map2[A,B,Z](fa:monix.bio.Task[E,A],fb:monix.bio.Task[E,B])(f:(A,B)=>Z):monix.bio.Task[E,Z]", "kind" : "def"}, {"label" : "ap", "tail" : "(ff: Task[Throwable, (A) => B])(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.ap", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap[A,B](ff:monix.bio.Task[E,A=>B])(fa:monix.bio.Task[E,A]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "tailRecM", "tail" : "(a: A)(f: (A) => Task[Throwable, Either[A, B]]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.tailRecM", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tailRecM[A,B](a:A)(f:A=>monix.bio.Task[E,Either[A,B]]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "flatten", "tail" : "(ffa: Task[Throwable, Task[Throwable, A]]): Task[Throwable, A]", "member" : "monix.bio.instances.CatsBaseForTask.flatten", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#flatten[A](ffa:monix.bio.Task[E,monix.bio.Task[E,A]]):monix.bio.Task[E,A]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, B]", "member" : "monix.bio.instances.CatsBaseForTask.flatMap", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#flatMap[A,B](fa:monix.bio.Task[E,A])(f:A=>monix.bio.Task[E,B]):monix.bio.Task[E,B]", "kind" : "def"}, {"label" : "unit", "tail" : ": UIO[Unit]", "member" : "monix.bio.instances.CatsBaseForTask.unit", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#unit:monix.bio.UIO[Unit]", "kind" : "val"}, {"label" : "pure", "tail" : "(a: A): UIO[A]", "member" : "monix.bio.instances.CatsBaseForTask.pure", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#pure[A](a:A):monix.bio.UIO[A]", "kind" : "def"}, {"label" : "leftWiden", "tail" : "(fab: Task[A, B]): Task[AA, B]", "member" : "cats.Bifunctor.leftWiden", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#leftWiden[A,B,AA>:A](fab:F[A,B]):F[AA,B]", "kind" : "def"}, {"label" : "compose", "tail" : "(G0: Bifunctor[G]): Bifunctor[[α, β]Task[G[α, β], G[α, β]]]", "member" : "cats.Bifunctor.compose", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#compose[G[_,_]](implicitG0:cats.Bifunctor[G]):cats.Bifunctor[[α,β]F[G[α,β],G[α,β]]]", "kind" : "def"}, {"label" : "leftMap", "tail" : "(fab: Task[A, B])(f: (A) => C): Task[C, B]", "member" : "cats.Bifunctor.leftMap", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#leftMap[A,B,C](fab:F[A,B])(f:A=>C):F[C,B]", "kind" : "def"}, {"label" : "leftFunctor", "tail" : "(): Functor[[α$1$]Task[α$1$, X]]", "member" : "cats.Bifunctor.leftFunctor", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#leftFunctor[X]:cats.Functor[[α$1$]F[α$1$,X]]", "kind" : "def"}, {"label" : "rightFunctor", "tail" : "(): Functor[[β$0$]Task[X, β$0$]]", "member" : "cats.Bifunctor.rightFunctor", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#rightFunctor[X]:cats.Functor[[β$0$]F[X,β$0$]]", "kind" : "def"}, {"label" : "sum", "tail" : "(fa: Task[Throwable, A], fb: Task[Throwable, B])(F: Functor[[β$2$]Task[Throwable, β$2$]]): Task[Throwable, Either[A, B]]", "member" : "cats.SemigroupK.sum", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#sum[A,B](fa:F[A],fb:F[B])(implicitF:cats.Functor[F]):F[Either[A,B]]", "kind" : "def"}, {"label" : "compose", "tail" : "(): SemigroupK[[α]Task[Throwable, G[α]]]", "member" : "cats.SemigroupK.compose", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#compose[G[_]]:cats.SemigroupK[[α]F[G[α]]]", "kind" : "def"}, {"label" : "algebra", "tail" : "(): Semigroup[Task[Throwable, A]]", "member" : "cats.SemigroupK.algebra", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#algebra[A]:cats.Semigroup[F[A]]", "kind" : "def"}, {"label" : "adaptError", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Throwable]): Task[Throwable, A]", "member" : "cats.MonadError.adaptError", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#adaptError[A](fa:F[A])(pf:PartialFunction[E,E]):F[A]", "kind" : "def"}, {"label" : "redeemWith", "tail" : "(fa: Task[Throwable, A])(recover: (Throwable) => Task[Throwable, B], bind: (A) => Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.MonadError.redeemWith", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#redeemWith[A,B](fa:F[A])(recover:E=>F[B],bind:A=>F[B]):F[B]", "kind" : "def"}, {"label" : "rethrow", "tail" : "(fa: Task[Throwable, Either[EE, A]]): Task[Throwable, A]", "member" : "cats.MonadError.rethrow", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#rethrow[A,EE<:E](fa:F[Either[EE,A]]):F[A]", "kind" : "def"}, {"label" : "ensureOr", "tail" : "(fa: Task[Throwable, A])(error: (A) => Throwable)(predicate: (A) => Boolean): Task[Throwable, A]", "member" : "cats.MonadError.ensureOr", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ensureOr[A](fa:F[A])(error:A=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "ensure", "tail" : "(fa: Task[Throwable, A])(error: => Throwable)(predicate: (A) => Boolean): Task[Throwable, A]", "member" : "cats.MonadError.ensure", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ensure[A](fa:F[A])(error:=>E)(predicate:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntilM", "tail" : "(init: A)(f: (A) => Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateUntilM", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#iterateUntilM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhileM", "tail" : "(init: A)(f: (A) => Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateWhileM", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#iterateWhileM[A](init:A)(f:A=>F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateUntil", "tail" : "(f: Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateUntil", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#iterateUntil[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "iterateWhile", "tail" : "(f: Task[Throwable, A])(p: (A) => Boolean): Task[Throwable, A]", "member" : "cats.Monad.iterateWhile", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#iterateWhile[A](f:F[A])(p:A=>Boolean):F[A]", "kind" : "def"}, {"label" : "untilM_", "tail" : "(f: Task[Throwable, A])(cond: => Task[Throwable, Boolean]): Task[Throwable, Unit]", "member" : "cats.Monad.untilM_", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#untilM_[A](f:F[A])(cond:=>F[Boolean]):F[Unit]", "kind" : "def"}, {"label" : "untilM", "tail" : "(f: Task[Throwable, A])(cond: => Task[Throwable, Boolean])(G: Alternative[G]): Task[Throwable, G[A]]", "member" : "cats.Monad.untilM", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#untilM[G[_<:<?>],A](f:F[A])(cond:=>F[Boolean])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "whileM_", "tail" : "(p: Task[Throwable, Boolean])(body: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Monad.whileM_", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#whileM_[A](p:F[Boolean])(body:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "whileM", "tail" : "(p: Task[Throwable, Boolean])(body: => Task[Throwable, A])(G: Alternative[G]): Task[Throwable, G[A]]", "member" : "cats.Monad.whileM", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#whileM[G[_<:<?>],A](p:F[Boolean])(body:=>F[A])(implicitG:cats.Alternative[G]):F[G[A]]", "kind" : "def"}, {"label" : "untilDefinedM", "tail" : "(foa: Task[Throwable, Option[A]]): Task[Throwable, A]", "member" : "cats.FlatMap.untilDefinedM", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#untilDefinedM[A](foa:F[Option[A]]):F[A]", "kind" : "def"}, {"label" : "iterateForeverM", "tail" : "(a: A)(f: (A) => Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.FlatMap.iterateForeverM", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#iterateForeverM[A,B](a:A)(f:A=>F[A]):F[B]", "kind" : "def"}, {"label" : "foreverM", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.FlatMap.foreverM", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#foreverM[A,B](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "flatTap", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.FlatMap.flatTap", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#flatTap[A,B](fa:F[A])(f:A=>F[B]):F[A]", "kind" : "def"}, {"label" : "ifM", "tail" : "(fa: Task[Throwable, Boolean])(ifTrue: => Task[Throwable, B], ifFalse: => Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.FlatMap.ifM", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ifM[B](fa:F[Boolean])(ifTrue:=>F[B],ifFalse:=>F[B]):F[B]", "kind" : "def"}, {"label" : "mproduct", "tail" : "(fa: Task[Throwable, A])(f: (A) => Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "cats.FlatMap.mproduct", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#mproduct[A,B](fa:F[A])(f:A=>F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "productL", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.FlatMap.productL", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#productL[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "def"}, {"label" : "productR", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.FlatMap.productR", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#productR[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "def"}, {"label" : "ap2", "tail" : "(ff: Task[Throwable, (A, B) => Z])(fa: Task[Throwable, A], fb: Task[Throwable, B]): Task[Throwable, Z]", "member" : "cats.FlatMap.ap2", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap2[A,B,Z](ff:F[(A,B)=>Z])(fa:F[A],fb:F[B]):F[Z]", "kind" : "def"}, {"label" : "productLEval", "tail" : "(fa: Task[Throwable, A])(fb: Eval[Task[Throwable, B]]): Task[Throwable, A]", "member" : "cats.FlatMap.productLEval", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#productLEval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[A]", "kind" : "def"}, {"label" : "productREval", "tail" : "(fa: Task[Throwable, A])(fb: Eval[Task[Throwable, B]]): Task[Throwable, B]", "member" : "cats.FlatMap.productREval", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#productREval[A,B](fa:F[A])(fb:cats.Eval[F[B]]):F[B]", "kind" : "def"}, {"label" : "fromValidated", "tail" : "(x: Validated[Throwable, A]): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromValidated", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#fromValidated[A](x:cats.data.Validated[E,A]):F[A]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(oa: Option[A], ifEmpty: => Throwable): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromOption", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#fromOption[A](oa:Option[A],ifEmpty:=>E):F[A]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(x: Either[Throwable, A]): Task[Throwable, A]", "member" : "cats.ApplicativeError.fromEither", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#fromEither[A](x:Either[E,A]):F[A]", "kind" : "def"}, {"label" : "catchOnly", "tail" : "(): CatchOnlyPartiallyApplied[T, [β$0$]Task[Throwable, β$0$], Throwable]", "member" : "cats.ApplicativeError.catchOnly", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#catchOnly[T>:Null<:Throwable]:cats.ApplicativeError.CatchOnlyPartiallyApplied[T,F,E]", "kind" : "def"}, {"label" : "onError", "tail" : "(fa: Task[Throwable, A])(pf: PartialFunction[Throwable, Task[Throwable, Unit]]): Task[Throwable, A]", "member" : "cats.ApplicativeError.onError", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#onError[A](fa:F[A])(pf:PartialFunction[E,F[Unit]]):F[A]", "kind" : "def"}, {"label" : "redeem", "tail" : "(fa: Task[Throwable, A])(recover: (Throwable) => B, f: (A) => B): Task[Throwable, B]", "member" : "cats.ApplicativeError.redeem", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#redeem[A,B](fa:F[A])(recover:E=>B,f:A=>B):F[B]", "kind" : "def"}, {"label" : "attemptNarrow", "tail" : "(fa: Task[Throwable, A])(tag: ClassTag[EE], ev: <:<[EE, Throwable]): Task[Throwable, Either[EE, A]]", "member" : "cats.ApplicativeError.attemptNarrow", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#attemptNarrow[EE,A](fa:F[A])(implicittag:scala.reflect.ClassTag[EE],implicitev:EE<:<E):F[Either[EE,A]]", "kind" : "def"}, {"label" : "attemptT", "tail" : "(fa: Task[Throwable, A]): EitherT[[β$0$]Task[Throwable, β$0$], Throwable, A]", "member" : "cats.ApplicativeError.attemptT", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#attemptT[A](fa:F[A]):cats.data.EitherT[F,E,A]", "kind" : "def"}, {"label" : "whenA", "tail" : "(cond: Boolean)(f: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Applicative.whenA", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#whenA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "unlessA", "tail" : "(cond: Boolean)(f: => Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Applicative.unlessA", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#unlessA[A](cond:Boolean)(f:=>F[A]):F[Unit]", "kind" : "def"}, {"label" : "composeContravariantMonoidal", "tail" : "(arg0: ContravariantMonoidal[G]): ContravariantMonoidal[[α]Task[Throwable, G[α]]]", "member" : "cats.Applicative.composeContravariantMonoidal", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#composeContravariantMonoidal[G[_<:<?>]](implicitevidence$2:cats.ContravariantMonoidal[G]):cats.ContravariantMonoidal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Applicative[G]): Applicative[[α]Task[Throwable, G[α]]]", "member" : "cats.Applicative.compose", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Applicative[G]):cats.Applicative[[α]F[G[α]]]", "kind" : "def"}, {"label" : "replicateA", "tail" : "(n: Int, fa: Task[Throwable, A]): Task[Throwable, List[A]]", "member" : "cats.Applicative.replicateA", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#replicateA[A](n:Int,fa:F[A]):F[List[A]]", "kind" : "def"}, {"label" : "point", "tail" : "(a: A): Task[Throwable, A]", "member" : "cats.InvariantMonoidal.point", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#point[A](a:A):F[A]", "kind" : "def"}, {"label" : "ifA", "tail" : "(fcond: Task[Throwable, Boolean])(ifTrue: Task[Throwable, A], ifFalse: Task[Throwable, A]): Task[Throwable, A]", "member" : "cats.Apply.ifA", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ifA[A](fcond:F[Boolean])(ifTrue:F[A],ifFalse:F[A]):F[A]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Apply[G]): Apply[[α]Task[Throwable, G[α]]]", "member" : "cats.Apply.compose", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Apply[G]):cats.Apply[[α]F[G[α]]]", "kind" : "def"}, {"label" : "map2Eval", "tail" : "(fa: Task[Throwable, A], fb: Eval[Task[Throwable, B]])(f: (A, B) => Z): Eval[Task[Throwable, Z]]", "member" : "cats.Apply.map2Eval", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map2Eval[A,B,Z](fa:F[A],fb:cats.Eval[F[B]])(f:(A,B)=>Z):cats.Eval[F[Z]]", "kind" : "def"}, {"label" : "<*", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, A]", "member" : "cats.Apply.<*", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#<*[A,B](fa:F[A])(fb:F[B]):F[A]", "kind" : "final def"}, {"label" : "*>", "tail" : "(fa: Task[Throwable, A])(fb: Task[Throwable, B]): Task[Throwable, B]", "member" : "cats.Apply.*>", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#*>[A,B](fa:F[A])(fb:F[B]):F[B]", "kind" : "final def"}, {"label" : "<*>", "tail" : "(ff: Task[Throwable, (A) => B])(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.Apply.<*>", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#<*>[A,B](ff:F[A=>B])(fa:F[A]):F[B]", "kind" : "final def"}, {"label" : "tuple22", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)]", "member" : "cats.ApplyArityFunctions.tuple22", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)]", "kind" : "def"}, {"label" : "map22", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map22", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap22", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20], f21: Task[Throwable, A21]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap22", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap22[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20],f21:F[A21]):F[Z]", "kind" : "def"}, {"label" : "tuple21", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)]", "member" : "cats.ApplyArityFunctions.tuple21", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)]", "kind" : "def"}, {"label" : "map21", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map21", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap21", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19], f20: Task[Throwable, A20]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap21", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap21[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19],f20:F[A20]):F[Z]", "kind" : "def"}, {"label" : "tuple20", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)]", "member" : "cats.ApplyArityFunctions.tuple20", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)]", "kind" : "def"}, {"label" : "map20", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map20", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap20", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18], f19: Task[Throwable, A19]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap20", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap20[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18],f19:F[A19]):F[Z]", "kind" : "def"}, {"label" : "tuple19", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)]", "member" : "cats.ApplyArityFunctions.tuple19", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)]", "kind" : "def"}, {"label" : "map19", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map19", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap19", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17], f18: Task[Throwable, A18]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap19", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap19[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17],f18:F[A18]):F[Z]", "kind" : "def"}, {"label" : "tuple18", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)]", "member" : "cats.ApplyArityFunctions.tuple18", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)]", "kind" : "def"}, {"label" : "map18", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map18", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap18", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16], f17: Task[Throwable, A17]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap18", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap18[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16],f17:F[A17]):F[Z]", "kind" : "def"}, {"label" : "tuple17", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)]", "member" : "cats.ApplyArityFunctions.tuple17", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)]", "kind" : "def"}, {"label" : "map17", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map17", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap17", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15], f16: Task[Throwable, A16]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap17", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap17[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15],f16:F[A16]):F[Z]", "kind" : "def"}, {"label" : "tuple16", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)]", "member" : "cats.ApplyArityFunctions.tuple16", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)]", "kind" : "def"}, {"label" : "map16", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map16", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap16", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14], f15: Task[Throwable, A15]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap16", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap16[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14],f15:F[A15]):F[Z]", "kind" : "def"}, {"label" : "tuple15", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)]", "member" : "cats.ApplyArityFunctions.tuple15", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)]", "kind" : "def"}, {"label" : "map15", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map15", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap15", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13], f14: Task[Throwable, A14]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap15", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap15[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13],f14:F[A14]):F[Z]", "kind" : "def"}, {"label" : "tuple14", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)]", "member" : "cats.ApplyArityFunctions.tuple14", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)]", "kind" : "def"}, {"label" : "map14", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map14", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap14", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12], f13: Task[Throwable, A13]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap14", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap14[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12],f13:F[A13]):F[Z]", "kind" : "def"}, {"label" : "tuple13", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)]", "member" : "cats.ApplyArityFunctions.tuple13", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)]", "kind" : "def"}, {"label" : "map13", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map13", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap13", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11], f12: Task[Throwable, A12]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap13", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap13[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11],f12:F[A12]):F[Z]", "kind" : "def"}, {"label" : "tuple12", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)]", "member" : "cats.ApplyArityFunctions.tuple12", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)]", "kind" : "def"}, {"label" : "map12", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map12", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap12", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10], f11: Task[Throwable, A11]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap12", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap12[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10],f11:F[A11]):F[Z]", "kind" : "def"}, {"label" : "tuple11", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)]", "member" : "cats.ApplyArityFunctions.tuple11", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)]", "kind" : "def"}, {"label" : "map11", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map11", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap11", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9], f10: Task[Throwable, A10]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap11", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap11[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9],f10:F[A10]):F[Z]", "kind" : "def"}, {"label" : "tuple10", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9)]", "member" : "cats.ApplyArityFunctions.tuple10", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)]", "kind" : "def"}, {"label" : "map10", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map10", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap10", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8, A9) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8], f9: Task[Throwable, A9]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap10", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap10[A0,A1,A2,A3,A4,A5,A6,A7,A8,A9,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8,A9)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8],f9:F[A9]):F[Z]", "kind" : "def"}, {"label" : "tuple9", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8)]", "member" : "cats.ApplyArityFunctions.tuple9", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)]", "kind" : "def"}, {"label" : "map9", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8])(f: (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map9", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8])(f:(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap9", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7, A8) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7], f8: Task[Throwable, A8]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap9", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap9[A0,A1,A2,A3,A4,A5,A6,A7,A8,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7,A8)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7],f8:F[A8]):F[Z]", "kind" : "def"}, {"label" : "tuple8", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7)]", "member" : "cats.ApplyArityFunctions.tuple8", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple8[A0,A1,A2,A3,A4,A5,A6,A7,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[(A0,A1,A2,A3,A4,A5,A6,A7)]", "kind" : "def"}, {"label" : "map8", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7])(f: (A0, A1, A2, A3, A4, A5, A6, A7) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map8", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7])(f:(A0,A1,A2,A3,A4,A5,A6,A7)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap8", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6, A7) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6], f7: Task[Throwable, A7]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap8", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap8[A0,A1,A2,A3,A4,A5,A6,A7,Z](f:F[(A0,A1,A2,A3,A4,A5,A6,A7)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6],f7:F[A7]):F[Z]", "kind" : "def"}, {"label" : "tuple7", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6]): Task[Throwable, (A0, A1, A2, A3, A4, A5, A6)]", "member" : "cats.ApplyArityFunctions.tuple7", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple7[A0,A1,A2,A3,A4,A5,A6,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[(A0,A1,A2,A3,A4,A5,A6)]", "kind" : "def"}, {"label" : "map7", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6])(f: (A0, A1, A2, A3, A4, A5, A6) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map7", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map7[A0,A1,A2,A3,A4,A5,A6,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6])(f:(A0,A1,A2,A3,A4,A5,A6)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap7", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5, A6) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5], f6: Task[Throwable, A6]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap7", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap7[A0,A1,A2,A3,A4,A5,A6,Z](f:F[(A0,A1,A2,A3,A4,A5,A6)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5],f6:F[A6]):F[Z]", "kind" : "def"}, {"label" : "tuple6", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5]): Task[Throwable, (A0, A1, A2, A3, A4, A5)]", "member" : "cats.ApplyArityFunctions.tuple6", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple6[A0,A1,A2,A3,A4,A5,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[(A0,A1,A2,A3,A4,A5)]", "kind" : "def"}, {"label" : "map6", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5])(f: (A0, A1, A2, A3, A4, A5) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map6", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map6[A0,A1,A2,A3,A4,A5,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5])(f:(A0,A1,A2,A3,A4,A5)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap6", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4, A5) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4], f5: Task[Throwable, A5]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap6", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap6[A0,A1,A2,A3,A4,A5,Z](f:F[(A0,A1,A2,A3,A4,A5)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4],f5:F[A5]):F[Z]", "kind" : "def"}, {"label" : "tuple5", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4]): Task[Throwable, (A0, A1, A2, A3, A4)]", "member" : "cats.ApplyArityFunctions.tuple5", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple5[A0,A1,A2,A3,A4,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[(A0,A1,A2,A3,A4)]", "kind" : "def"}, {"label" : "map5", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4])(f: (A0, A1, A2, A3, A4) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map5", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map5[A0,A1,A2,A3,A4,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4])(f:(A0,A1,A2,A3,A4)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap5", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3, A4) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3], f4: Task[Throwable, A4]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap5", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap5[A0,A1,A2,A3,A4,Z](f:F[(A0,A1,A2,A3,A4)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3],f4:F[A4]):F[Z]", "kind" : "def"}, {"label" : "tuple4", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3]): Task[Throwable, (A0, A1, A2, A3)]", "member" : "cats.ApplyArityFunctions.tuple4", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple4[A0,A1,A2,A3,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[(A0,A1,A2,A3)]", "kind" : "def"}, {"label" : "map4", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3])(f: (A0, A1, A2, A3) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map4", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map4[A0,A1,A2,A3,Z](f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3])(f:(A0,A1,A2,A3)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap4", "tail" : "(f: Task[Throwable, (A0, A1, A2, A3) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2], f3: Task[Throwable, A3]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap4", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap4[A0,A1,A2,A3,Z](f:F[(A0,A1,A2,A3)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2],f3:F[A3]):F[Z]", "kind" : "def"}, {"label" : "tuple3", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2]): Task[Throwable, (A0, A1, A2)]", "member" : "cats.ApplyArityFunctions.tuple3", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple3[A0,A1,A2,Z<:<?>](f0:F[A0],f1:F[A1],f2:F[A2]):F[(A0,A1,A2)]", "kind" : "def"}, {"label" : "map3", "tail" : "(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2])(f: (A0, A1, A2) => Z): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.map3", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#map3[A0,A1,A2,Z](f0:F[A0],f1:F[A1],f2:F[A2])(f:(A0,A1,A2)=>Z):F[Z]", "kind" : "def"}, {"label" : "ap3", "tail" : "(f: Task[Throwable, (A0, A1, A2) => Z])(f0: Task[Throwable, A0], f1: Task[Throwable, A1], f2: Task[Throwable, A2]): Task[Throwable, Z]", "member" : "cats.ApplyArityFunctions.ap3", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ap3[A0,A1,A2,Z](f:F[(A0,A1,A2)=>Z])(f0:F[A0],f1:F[A1],f2:F[A2]):F[Z]", "kind" : "def"}, {"label" : "tuple2", "tail" : "(f1: Task[Throwable, A], f2: Task[Throwable, B]): Task[Throwable, (A, B)]", "member" : "cats.ApplyArityFunctions.tuple2", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tuple2[A,B](f1:F[A],f2:F[B]):F[(A,B)]", "kind" : "def"}, {"label" : "composeApply", "tail" : "(arg0: Apply[G]): InvariantSemigroupal[[α]Task[Throwable, G[α]]]", "member" : "cats.InvariantSemigroupal.composeApply", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#composeApply[G[_<:<?>]](implicitevidence$1:cats.Apply[G]):cats.InvariantSemigroupal[[α]F[G[α]]]", "kind" : "def"}, {"label" : "composeContravariant", "tail" : "(arg0: Contravariant[G]): Contravariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Functor.composeContravariant", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#composeContravariant[G[_]](implicitevidence$2:cats.Contravariant[G]):cats.Contravariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Functor[G]): Functor[[α]Task[Throwable, G[α]]]", "member" : "cats.Functor.compose", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Functor[G]):cats.Functor[[α]F[G[α]]]", "kind" : "def"}, {"label" : "ifF", "tail" : "(fb: Task[Throwable, Boolean])(ifTrue: => A, ifFalse: => A): Task[Throwable, A]", "member" : "cats.Functor.ifF", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ifF[A](fb:F[Boolean])(ifTrue:=>A,ifFalse:=>A):F[A]", "kind" : "def"}, {"label" : "unzip", "tail" : "(fab: Task[Throwable, (A, B)]): (Task[Throwable, A], Task[Throwable, B])", "member" : "cats.Functor.unzip", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#unzip[A,B](fab:F[(A,B)]):(F[A],F[B])", "kind" : "def"}, {"label" : "tupleRight", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, (A, B)]", "member" : "cats.Functor.tupleRight", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tupleRight[A,B](fa:F[A],b:B):F[(A,B)]", "kind" : "def"}, {"label" : "tupleLeft", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, (B, A)]", "member" : "cats.Functor.tupleLeft", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#tupleLeft[A,B](fa:F[A],b:B):F[(B,A)]", "kind" : "def"}, {"label" : "as", "tail" : "(fa: Task[Throwable, A], b: B): Task[Throwable, B]", "member" : "cats.Functor.as", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#as[A,B](fa:F[A],b:B):F[B]", "kind" : "def"}, {"label" : "fproduct", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, (A, B)]", "member" : "cats.Functor.fproduct", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#fproduct[A,B](fa:F[A])(f:A=>B):F[(A,B)]", "kind" : "def"}, {"label" : "void", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, Unit]", "member" : "cats.Functor.void", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#void[A](fa:F[A]):F[Unit]", "kind" : "def"}, {"label" : "lift", "tail" : "(f: (A) => B): (Task[Throwable, A]) => Task[Throwable, B]", "member" : "cats.Functor.lift", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#lift[A,B](f:A=>B):F[A]=>F[B]", "kind" : "def"}, {"label" : "widen", "tail" : "(fa: Task[Throwable, A]): Task[Throwable, B]", "member" : "cats.Functor.widen", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#widen[A,B>:A](fa:F[A]):F[B]", "kind" : "def"}, {"label" : "fmap", "tail" : "(fa: Task[Throwable, A])(f: (A) => B): Task[Throwable, B]", "member" : "cats.Functor.fmap", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#fmap[A,B](fa:F[A])(f:A=>B):F[B]", "kind" : "final def"}, {"label" : "imap", "tail" : "(fa: Task[Throwable, A])(f: (A) => B)(g: (B) => A): Task[Throwable, B]", "member" : "cats.Functor.imap", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#imap[A,B](fa:F[A])(f:A=>B)(g:B=>A):F[B]", "kind" : "def"}, {"label" : "composeFunctor", "tail" : "(arg0: Functor[G]): Invariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Invariant.composeFunctor", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#composeFunctor[G[_<:<?>]](implicitevidence$2:cats.Functor[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "compose", "tail" : "(arg0: Invariant[G]): Invariant[[α]Task[Throwable, G[α]]]", "member" : "cats.Invariant.compose", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#compose[G[_]](implicitevidence$1:cats.Invariant[G]):cats.Invariant[[α]F[G[α]]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/instances\/CatsEffectForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/instances\/CatsEffectForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/instances\/CatsEffectForTask.html", "kind" : "class"}, {"name" : "monix.bio.instances.CatsMonadToMonoid", "shortDescription" : "Given that A has a cats.Semigroup implementation, thisbuilds a Semigroup[F[A]] instance for any F[_] data typethat implements cats.Monad.", "members_class" : [{"label" : "empty", "tail" : "(): F[A]", "member" : "monix.bio.instances.CatsMonadToMonoid.empty", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#empty:F[A]", "kind" : "def"}, {"member" : "monix.bio.instances.CatsMonadToMonoid#<init>", "error" : "unsupported entity"}, {"label" : "combineAllOption", "tail" : "(as: IterableOnce[F[A]]): Option[F[A]]", "member" : "cats.kernel.Monoid.combineAllOption", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#combineAllOption(as:IterableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "combineAll", "tail" : "(as: IterableOnce[F[A]]): F[A]", "member" : "cats.kernel.Monoid.combineAll", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#combineAll(as:IterableOnce[A]):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Monoid.combineN", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(a: F[A])(ev: Eq[F[A]]): Boolean", "member" : "cats.kernel.Monoid.isEmpty", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#isEmpty(a:A)(implicitev:cats.kernel.Eq[A]):Boolean", "kind" : "def"}, {"label" : "combine", "tail" : "(x: F[A], y: F[A]): F[A]", "member" : "monix.bio.instances.CatsMonadToSemigroup.combine", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#combine(x:F[A],y:F[A]):F[A]", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/instances\/CatsMonadToMonoid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/instances\/CatsMonadToMonoid.html", "kind" : "class"}, {"name" : "monix.bio.instances.CatsMonadToSemigroup", "shortDescription" : "Given that A has a cats.Monoid implementation, this buildsa Semigroup[F[A]] instance for any F[_] data type thatimplements cats.effect.Sync.", "members_class" : [{"label" : "combine", "tail" : "(x: F[A], y: F[A]): F[A]", "member" : "monix.bio.instances.CatsMonadToSemigroup.combine", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#combine(x:F[A],y:F[A]):F[A]", "kind" : "def"}, {"member" : "monix.bio.instances.CatsMonadToSemigroup#<init>", "error" : "unsupported entity"}, {"label" : "combineAllOption", "tail" : "(as: IterableOnce[F[A]]): Option[F[A]]", "member" : "cats.kernel.Semigroup.combineAllOption", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#combineAllOption(as:IterableOnce[A]):Option[A]", "kind" : "def"}, {"label" : "repeatedCombineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Semigroup.repeatedCombineN", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#repeatedCombineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "combineN", "tail" : "(a: F[A], n: Int): F[A]", "member" : "cats.kernel.Semigroup.combineN", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#combineN(a:A,n:Int):A", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/instances\/CatsMonadToSemigroup.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/instances\/CatsMonadToSemigroup.html", "kind" : "class"}, {"name" : "monix.bio.instances.CatsParallelForTask", "shortDescription" : "cats.Parallel type class instance for Task.", "members_class" : [{"label" : "parallel", "tail" : ": ~>[[β$7$]Task[E, β$7$], [β$8$]TaskParallelNewtype.Par.Type[E, β$8$]]", "member" : "monix.bio.instances.CatsParallelForTask.parallel", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#parallel:[β$7$]monix.bio.Task[E,β$7$]~>[β$8$]monix.bio.Task.Par.Type[E,β$8$]", "kind" : "val"}, {"label" : "sequential", "tail" : ": ~>[[β$3$]TaskParallelNewtype.Par.Type[E, β$3$], [β$4$]Task[E, β$4$]]", "member" : "monix.bio.instances.CatsParallelForTask.sequential", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#sequential:[β$3$]monix.bio.Task.Par.Type[E,β$3$]~>[β$4$]monix.bio.Task[E,β$4$]", "kind" : "val"}, {"label" : "monad", "tail" : ": Monad[[β$2$]Task[E, β$2$]]", "member" : "monix.bio.instances.CatsParallelForTask.monad", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#monad:cats.Monad[[β$2$]monix.bio.Task[E,β$2$]]", "kind" : "val"}, {"label" : "applicative", "tail" : ": CommutativeApplicative[[β$1$]TaskParallelNewtype.Par.Type[E, β$1$]]", "member" : "monix.bio.instances.CatsParallelForTask.applicative", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#applicative:cats.CommutativeApplicative[[β$1$]monix.bio.Task.Par.Type[E,β$1$]]", "kind" : "val"}, {"label" : "F", "tail" : "", "member" : "monix.bio.instances.CatsParallelForTask.F", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#F[A]=monix.bio.Task.Par[E,A]", "kind" : "type"}, {"member" : "monix.bio.instances.CatsParallelForTask#<init>", "error" : "unsupported entity"}, {"label" : "applicativeError", "tail" : "(E: MonadError[[β$0$]Task[E, β$0$], E]): ApplicativeError[F, E]", "member" : "cats.Parallel.applicativeError", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#applicativeError[E](implicitE:cats.MonadError[M,E]):cats.ApplicativeError[Parallel.this.F,E]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(): FlatMap[[β$0$]Task[E, β$0$]]", "member" : "cats.Parallel.flatMap", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#flatMap:cats.FlatMap[M]", "kind" : "def"}, {"label" : "apply", "tail" : "(): Apply[F]", "member" : "cats.Parallel.apply", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#apply:cats.Apply[Parallel.this.F]", "kind" : "def"}, {"label" : "parProductL", "tail" : "(ma: Task[E, A])(mb: Task[E, B]): Task[E, A]", "member" : "cats.NonEmptyParallel.parProductL", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#parProductL[A,B](ma:M[A])(mb:M[B]):M[A]", "kind" : "def"}, {"label" : "parProductR", "tail" : "(ma: Task[E, A])(mb: Task[E, B]): Task[E, B]", "member" : "cats.NonEmptyParallel.parProductR", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#parProductR[A,B](ma:M[A])(mb:M[B]):M[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: => T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "monix\/bio\/instances\/CatsParallelForTask.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.equals", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#equals(x$1:Object):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyRef]", "member" : "scala.AnyRef.getClass", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "monix\/bio\/instances\/CatsParallelForTask.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "monix\/bio\/instances\/CatsParallelForTask.html", "kind" : "class"}]};